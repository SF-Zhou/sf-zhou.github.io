<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/dist/favicon.ico">
    <link rel="apple-touch-icon" href="/dist/favicon.png">
    <link rel="stylesheet" type="text/css" href="/dist/highlight.css">
    <link rel="stylesheet" type="text/css" href="/dist/katex.min.css">
    <link rel="stylesheet" type="text/css" href="/dist/gitalk.css">
    <link rel="stylesheet" type="text/css" href="/dist/main.css">
    <title>Tokio 源码分析「三、运行时 Runtime」 | SF-Zhou's Blog</title>
  </head>
  <body>
    <div class="app">
      <div class="title">
        <h1> Tokio 源码分析「三、运行时 Runtime」 </h1>
      </div>
      <div class="info">
        <div class="date"> 2021.01.17 </div>
        <a href="https://github.com/SF-Zhou">
          <div class="author"> SF-Zhou </div>
        </a>
      </div>
      <div class="markdown">
        <p>Tokio 的核心是一套 M:N 的协程 Runtime，下层通过 Rust 协程和 Mio 驱动，支撑上层的 HTTP / RPC 应用。本篇开始分析 Runtime，代码版本 <a href="https://github.com/tokio-rs/tokio/tree/tokio-1.0.2">v1.0.2</a>。</p>
<figure tabindex="1"><a href="../images/5e364463cf50f41fec2e028df84f6a4a.svg"><img src="../images/5e364463cf50f41fec2e028df84f6a4a.svg" alt=""></a><figcaption>Tokio 架构图 from <a href="http://tokio.rs">tokio.rs</a></figcaption></figure>
<h3 id="1.-概览"><a href="#1.-%E6%A6%82%E8%A7%88">1. 概览</a></h3>
<p>在阅读核心代码前，先介绍一下异步编程中的核心关键字：</p>
<p><strong>Asynchrony</strong>：异步指事件的发生与主程序流及处理此类事件的方式无关。这些事件可能是像信号这样的外部事件，或者是由程序引发的动作，会和程序的执行同时发生，而程序不会阻塞地等待结果。简而言之，事件发生在非调用方的线程中。同步与异步关注的是事件是否是在本线程中处理。</p>
<p><strong>Non-blocking</strong>：非阻塞指执行的操作不会阻塞程序的继续执行。阻塞与非阻塞关注的是调用方等待结果时的状态。阻塞非阻塞和同步异步是正交的，即存在同步阻塞、同步非阻塞、异步阻塞、异步非阻塞。</p>
<p><strong>Resumable Function</strong>：可恢复函数指可以暂停执行并从调用中返回，并且可以在将来从暂停的位置恢复执行的函数。可恢复函数是协程的基石。</p>
<p><strong>Asynchronous Runtime</strong>：异步运行时，上述概念的整合，通过可恢复函数、挂起位置埋点和用户态调度实现非抢占式的用户态线程切换，称之为协程。一般将同步阻塞 IO 的位置作为默认的挂起位置。</p>
<p>Tokio 库的代码量十分巨大，<a href="https://github.com/tokio-rs/tokio/tree/tokio-1.0.2/tokio/src"><code>tokio/src</code></a> 目录下共计 242 个代码文件，行数 5w+。核心代码的文件结构为：</p>
<pre class="language-markup"><code class="language-markup">tokio/src
├── blocking.rs
├── coop.rs
├── fs
├── future
├── io
├── lib.rs
├── loom
├── macros
├── net
├── park
├── process
├── runtime
├── signal
├── sync
├── task
├── time
└── util
</code></pre>
<p>再来看官方提供的样例：</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token class-name">TcpListener</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AsyncReadExt</span><span class="token punctuation">,</span> <span class="token class-name">AsyncWriteExt</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">>></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> socket<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

        <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// In a loop, read data from the socket and write the data back.</span>
            <span class="token keyword">loop</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">match</span> socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
                    <span class="token comment">// socket closed</span>
                    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=></span> <span class="token keyword">return</span><span class="token punctuation">,</span>
                    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">,</span>
                    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"failed to read from socket; err = {:?}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>

                <span class="token comment">// Write the data back</span>
                <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
                    <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"failed to write to socket; err = {:?}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果之前接触过协程和网络编程，肯定会赞叹上方 Echo Server 的高效和简洁。</p>
<h3 id="2.-tokio/runtime/task"><a href="#2.-tokio%2Fruntime%2Ftask">2. <code>tokio/runtime/task</code></a></h3>
<p>Tokio 的 Runtime 提供以下能力：</p>
<blockquote>
<ul>
<li>An <strong>I/O event loop</strong>, called the driver, which drives I/O resources and dispatches I/O events to tasks that depend on them.</li>
<li>A <strong>scheduler</strong> to execute <a href="https://docs.rs/tokio/0.2.24/tokio/task/index.html">tasks</a> that use these I/O resources.</li>
<li>A <strong>timer</strong> for scheduling work to run after a set period of time.</li>
</ul>
</blockquote>
<p>这一节来看任务 <code>task</code> 相关的抽象，代码路径为 <a href="https://github.com/tokio-rs/tokio/tree/tokio-1.0.2/tokio/src/runtime/task">tokio/src/runtime/task</a>。先看任务状态 <a href="https://github.com/tokio-rs/tokio/blob/tokio-1.0.2/tokio/src/runtime/task/state.rs"><code>state.rs</code></a>：</p>
<pre class="language-rust"><code class="language-rust"><span class="token comment">// State 本身是原子无符号数</span>
<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">:</span> <span class="token class-name">AtomicUsize</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// Snapshot 是从 State 读取到的值</span>
<span class="token attribute attr-name">#[derive(Copy, Clone)]</span>
<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Snapshot</span><span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">)</span>

<span class="token comment">// 更新 State 时的 Result，成功返回更新后的 Snapshot</span>
<span class="token keyword">type</span> <span class="token class-name">UpdateResult</span> <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Snapshot</span><span class="token punctuation">,</span> <span class="token class-name">Snapshot</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token comment">// State 实际的编码，包括一个引用计数</span>
<span class="token keyword">const</span> <span class="token constant">RUNNING</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b0001</span><span class="token punctuation">;</span>       <span class="token comment">// 是否在运行</span>
<span class="token keyword">const</span> <span class="token constant">COMPLETE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b0010</span><span class="token punctuation">;</span>      <span class="token comment">// 是否已完成</span>
<span class="token keyword">const</span> <span class="token constant">LIFECYCLE_MASK</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b11</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">NOTIFIED</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b100</span><span class="token punctuation">;</span>       <span class="token comment">// task 是否已经加入运行队列</span>
<span class="token keyword">const</span> <span class="token constant">JOIN_INTEREST</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b1_000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">JOIN_WAKER</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b10_000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">CANCELLED</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">0b100_000</span><span class="token punctuation">;</span>  <span class="token comment">// 任务被取消</span>
<span class="token keyword">const</span> <span class="token constant">STATE_MASK</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token constant">LIFECYCLE_MASK</span> <span class="token operator">|</span> <span class="token constant">NOTIFIED</span> <span class="token operator">|</span> <span class="token constant">JOIN_INTEREST</span> <span class="token operator">|</span> <span class="token constant">JOIN_WAKER</span> <span class="token operator">|</span> <span class="token constant">CANCELLED</span><span class="token punctuation">;</span>  <span class="token comment">// 所有状态相关的位</span>

<span class="token keyword">const</span> <span class="token constant">REF_COUNT_MASK</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token constant">STATE_MASK</span><span class="token punctuation">;</span>   <span class="token comment">// 引用计数使用的位</span>
<span class="token keyword">const</span> <span class="token constant">REF_COUNT_SHIFT</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token constant">REF_COUNT_MASK</span><span class="token punctuation">.</span><span class="token function">count_zeros</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">REF_ONE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">REF_COUNT_SHIFT</span><span class="token punctuation">;</span>  <span class="token comment">// 引用计数中的 1</span>

<span class="token keyword">const</span> <span class="token constant">INITIAL_STATE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">REF_ONE</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">JOIN_INTEREST</span> <span class="token operator">|</span> <span class="token constant">NOTIFIED</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化状态，scheduler 和 `JoinHandle` 会引用它</span>

<span class="token keyword">impl</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
        <span class="token class-name">State</span> <span class="token punctuation">{</span>
            val<span class="token punctuation">:</span> <span class="token class-name">AtomicUsize</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token constant">INITIAL_STATE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 读取当前的状态，使用 Acquire Ordering</span>
    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span>
        <span class="token class-name">Snapshot</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Acquire</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用 CAS 实现线程安全的状态转移，转移失败时返回当前的状态</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">fetch_update</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Snapshot</span><span class="token punctuation">,</span> <span class="token class-name">Snapshot</span><span class="token operator">></span>
    <span class="token keyword">where</span>
        <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">FnMut</span><span class="token punctuation">(</span><span class="token class-name">Snapshot</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Snapshot</span><span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> curr <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token function">f</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">=></span> next<span class="token punctuation">,</span>
                <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">compare_exchange</span><span class="token punctuation">(</span>curr<span class="token number">.0</span><span class="token punctuation">,</span> next<span class="token number">.0</span><span class="token punctuation">,</span> <span class="token class-name">AcqRel</span><span class="token punctuation">,</span> <span class="token class-name">Acquire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">match</span> res <span class="token punctuation">{</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">Err</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span> <span class="token operator">=></span> curr <span class="token operator">=</span> <span class="token class-name">Snapshot</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 尝试转移到 running 状态</span>
    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">transition_to_running</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> ref_inc<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">UpdateResult</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">fetch_update</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>curr<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token macro property">assert!</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">is_notified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">let</span> <span class="token keyword">mut</span> next <span class="token operator">=</span> curr<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token operator">!</span>next<span class="token punctuation">.</span><span class="token function">is_idle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">None</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> ref_inc <span class="token punctuation">{</span>
                next<span class="token punctuation">.</span><span class="token function">ref_inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            next<span class="token punctuation">.</span><span class="token function">set_running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span><span class="token function">unset_notified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Some</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 增加引用计数</span>
    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">ref_inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>process<span class="token punctuation">;</span>
        <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>atomic<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>val<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token constant">REF_ONE</span><span class="token punctuation">,</span> <span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// If the reference count overflowed, abort.</span>
        <span class="token keyword">if</span> prev <span class="token operator">></span> <span class="token keyword">isize</span><span class="token punctuation">::</span><span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
            <span class="token namespace">process<span class="token punctuation">::</span></span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Snapshot 提供状态读写的街口</span>
<span class="token keyword">impl</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_running</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token constant">RUNNING</span> <span class="token operator">==</span> <span class="token constant">RUNNING</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">set_running</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">|=</span> <span class="token constant">RUNNING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="references"><a href="#references">References</a></h3>
<ol>
<li><a href="https://tokio.rs/blog/2020-12-tokio-1-0">&quot;Announcing Tokio 1.0&quot;, <em>tokio.rs</em></a></li>
<li><a href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)">&quot;Asynchrony (computer programming)&quot;, <em>Wikipedia</em></a></li>
<li><a href="https://en.wikipedia.org/wiki/Asynchronous_I/O">&quot;Asynchronous I/O&quot;, <em>Wikipedia</em></a></li>
<li><a href="https://en.wikipedia.org/wiki/Talk:Asynchronous_I/O#async_is_not_nonblocking">&quot;async is not nonblocking&quot;, <em>Wikipedia</em></a></li>
</ol>

      </div>
      <div id="gitalk-container">
      </div>
      <div class="footer">
        <div class="license">
          Except where otherwise noted, content on this site is licensed under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.
        </div>
        <div class="copyright">
          Copyright©2021 SF-Zhou, All Rights Reserved. Powered by <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://github.com/features/actions">GitHub Actions</a>.
        </div>
      </div>
    </div>
    <script src="/dist/gitalk.min.js"></script>
    <script src="/dist/main.js"></script>
  </body>
</html>
