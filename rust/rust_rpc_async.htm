<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/dist/favicon.ico">
    <link rel="apple-touch-icon" href="/dist/favicon.png">
    <link rel="stylesheet" type="text/css" href="/dist/highlight.css">
    <link rel="stylesheet" type="text/css" href="/dist/katex.min.css">
    <link rel="stylesheet" type="text/css" href="/dist/main.css">
    <title>Rust RPC Async 接口探索 | SF-Zhou's Blog</title>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GQ26H3JQ3G"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-GQ26H3JQ3G');
    </script>
  </head>
  <body>
    <div class="app">
      <div class="title">
        <h1> Rust RPC Async 接口探索 </h1>
      </div>
      <div class="info">
        <div class="date"> 2024.06.17 </div>
        <a href="https://github.com/SF-Zhou">
          <div class="author"> SF-Zhou </div>
        </a>
      </div>
      <div class="markdown">
        <p>最近在做 Rust RDMA 的通信库，RDMA 建立通信时需要两端交换信息，常规的方式是依赖 Socket 或者 <a href="https://man7.org/linux/man-pages/man7/rdma_cm.7.html">RMDA CM</a>。我打算用前者，另外因为 RDMA 通信库最终暴露给用户的接口类似于 RPC 框架，所以打算自己实现一套 Rust RPC ，同时支持 TCP 和 RDMA。在设计 RPC 接口时遇到了一些问题，这里整理记录下来。</p>
<h3 id="1.-背景" tabindex="-1"><a href="#1.-%E8%83%8C%E6%99%AF">1. 背景</a></h3>
<p>团队原先项目使用的技术栈是 C++ 和 Folly Coroutines，我之前在上面搭建了一套 RPC 框架，有如下特性：</p>
<ol>
<li>基于 C++ 反射的二进制序列化</li>
<li>基于宏的 RPC 接口定义，接口协程化</li>
<li>单个 Server 支持多个 Service</li>
</ol>
<p>对于新的这套 RPC 框架，我仍然希望保留这些特性，使用上大概的设想是：</p>
<pre class="language-rust"><code class="language-rust"><span class="token comment">// 1. 定义 service，依赖过程宏生成辅助代码</span>
<span class="token attribute attr-name">#[rpc::service]</span>
<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Demo</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus_one</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 实现 service</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">DemoImpl</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span>
<span class="token keyword">impl</span> <span class="token class-name">DemoService</span> <span class="token keyword">for</span> <span class="token class-name">DemoImpl</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> _ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus_one</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> _ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>req <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3. server 加入 service</span>
<span class="token keyword">let</span> server <span class="token operator">=</span> <span class="token class-name">Server</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">add_service</span><span class="token punctuation">(</span><span class="token class-name">DemoImpl</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. client 访问</span>
<span class="token keyword">let</span> client_ctx <span class="token operator">=</span> <span class="token class-name">ClientContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">DemoClient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>client_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>async fn</code> 在 2023 年底已经可以在 trait 中直接使用了，想象中一切都是很美好的。</p>
<h3 id="2.-探索" tabindex="-1"><a href="#2.-%E6%8E%A2%E7%B4%A2">2. 探索</a></h3>
<p>定义 Service 接口时，我们需要依赖过程宏生成 server 端 dispatch 的代码，即根据请求数据判断具体调用哪个接口。假设我们的请求数据是一段字节流 bytes，该段字节流存储了接口名的字符串以及请求 req 的序列化结果，我们需要生成的代码应该类似于：</p>
<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">derse<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">DownwardBytes</span><span class="token punctuation">,</span> <span class="token class-name">Serialization</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[allow(async_fn_in_trait)]</span>
<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus_one</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">;</span>

    <span class="token comment">// generated by proc macro.</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">invoke</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> bytes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">>></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> buf <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">deserialize_from</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">match</span> name<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string">"echo"</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">Serialization</span><span class="token punctuation">::</span><span class="token function">deserialize_from</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> rsp <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> out <span class="token operator">=</span> rsp<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">DownwardBytes</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token string">"plus_one"</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">Serialization</span><span class="token punctuation">::</span><span class="token function">deserialize_from</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> rsp <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> out <span class="token operator">=</span> rsp<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">DownwardBytes</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            _ <span class="token operator">=></span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"method name is invalid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">DemoImpl</span><span class="token punctuation">;</span>
<span class="token keyword">impl</span> <span class="token class-name">Demo</span> <span class="token keyword">for</span> <span class="token class-name">DemoImpl</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">plus_one</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> req<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>req <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. invoke directly.</span>
    <span class="token keyword">let</span> service <span class="token operator">=</span> <span class="token class-name">DemoImpl</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. invoke by bytes.</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> bytes <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">DownwardBytes</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token string">"echo"</span><span class="token punctuation">.</span><span class="token function">serialize_to</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> bytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span><span class="token punctuation">::</span><span class="token function">deserialize</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">as_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>derse</code> 是我自己做的一套简单的二进制序列化工具。上面的错误处理比较粗犷，看个意思就行。核心内容是生成一个统一的接口函数 <code>async fn invoke(&amp;self, req: Vec&lt;u8&gt;) -&gt; Result&lt;Vec&lt;u8&gt;&gt;</code>。接下来只需要将 service impl 对象加入 server 中，server 收到新的二进制消息时调用 <code>impl.invoke(bytes)</code> 方法就可以。</p>
<p>如何存储该对象呢？</p>
<h3 id="references" tabindex="-1"><a href="#references">References</a></h3>
<ol>
<li><a href="https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-traits.html">Announcing <code>async fn</code> and return-position <code>impl Trait</code> in traits</a></li>
</ol>

      </div>
      
      <div class="footer">
        <div class="license">
          Except where otherwise noted, content on this site is licensed under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.
        </div>
        <div class="copyright">
          Copyright©2017 SF-Zhou, All Rights Reserved. Powered by <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://github.com/features/actions">GitHub Actions</a>.
        </div>
      </div>
    </div>
    <script src="/dist/main.js"></script>
  </body>
</html>
