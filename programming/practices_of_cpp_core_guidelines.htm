<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/dist/favicon.ico">
    <link rel="apple-touch-icon" href="/dist/favicon.png">
    <link rel="stylesheet" type="text/css" href="/dist/highlight.css">
    <link rel="stylesheet" type="text/css" href="/dist/katex.min.css">
    <link rel="stylesheet" type="text/css" href="/dist/gitalk.css">
    <link rel="stylesheet" type="text/css" href="/dist/main.css">
    <title>Practices of C++ Core Guidelines | SF-Zhou's Blog</title>
  </head>
  <body>
    <div class="app">
      <div class="title">
        <h1> Practices of C++ Core Guidelines </h1>
      </div>
      <div class="info">
        <div class="date"> 2019.01.02 </div>
        <a href="https://github.com/SF-Zhou">
          <div class="author"> SF-Zhou </div>
        </a>
      </div>
      <div class="markdown">
        <blockquote>
<p><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">C++ Core Guidelines</a>, a set of core guidelines for modern C++ (currently C++17) taking likely future enhancements and ISO Technical Specifications (TSs) into account. The aim is to help C++ programmers to write simpler, more efficient, more maintainable code.</p>
</blockquote>
<p>Today I was confused by the following: Why does our SDK have to use a C-style interface? For this, I looked up the documentation for the SDK and found that one of the core reasons is the ABI issue with C++. <a href="https://en.wikipedia.org/wiki/Application_binary_interface">Application binary interface</a> (ABI) with C++ has been around for a long time, and there are no signs of improvement in the near future. To figure out this problem, I continue to look for relevant information. And finally, I found a great study material, <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">C++ Core Guidelines</a>.</p>
<p>It's a long guide, and I will read it carefully and practice it. The relevant code will store in <a href="https://github.com/FebruaryBreeze/cpp-core-guideline-practices">GitHub</a>.</p>
<h3 id="1.-abi-and-pimpl"><a href="#1.-abi-and-pimpl">1. ABI and PImpl</a></h3>
<blockquote>
<p>An <strong>application binary interface</strong> (<strong>ABI</strong>) is an <a href="https://en.wikipedia.org/wiki/Interface_(computing)">interface</a> between two binary program modules; often, one of these modules is a <a href="https://en.wikipedia.org/wiki/Library_(computing)">library</a> or <a href="https://en.wikipedia.org/wiki/Operating_system">operating system</a> facility, and the other is a program that is being run by a user.</p>
</blockquote>
<figure tabindex="1"><a href="../images/5ec19443823c45790bb4d1524a75bcd1.svg"><img src="../images/5ec19443823c45790bb4d1524a75bcd1.svg" alt=""></a><figcaption>API &amp; ABI. Image is downloaded from Wikipedia.</figcaption></figure>
<blockquote>
<p>ABIs cover details such as:</p>
<ol>
<li>a processor instruction set</li>
<li>the sizes, layouts, and alignments of basic data tyeps</li>
<li>the <a href="https://en.wikipedia.org/wiki/Calling_convention">calling convention</a></li>
<li>how an application should make <a href="https://en.wikipedia.org/wiki/System_call">system calls</a> to the operating system</li>
<li>the binary format of <a href="https://en.wikipedia.org/wiki/Object_file">object files</a>, program libraries and so on.</li>
</ol>
</blockquote>
<blockquote>
<p>Because private data members participate in class layout and private member functions participate in overload resolution, changes to those implementation details require recompilation of all users of a class that uses them. A non-polymorphic interface class holding a pointer to implementation (Pimpl) can isolate the users of a class from changes in its implementation at the cost of an indirection.</p>
</blockquote>
<p>Example of <code>PImpl</code> in <a href="https://github.com/FebruaryBreeze/cpp-core-guideline-practices/blob/master/src/02_interfaces/27_stable_library_abi_with_pimpl_idiom.cpp"><strong>27_stable_library_abi_with_pimpl_idiom.cpp</strong></a>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>

<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"gsl/gsl"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"gtest/gtest.h"</span></span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>
  <span class="token keyword">class</span> <span class="token class-name">impl</span><span class="token punctuation">;</span>
  std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>impl<span class="token operator">></span> pimpl<span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// public API that will be forwarded to the implementation</span>
  <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// defined in the implementation file</span>
  <span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// defined in the implementation file, where impl is a complete type</span>
  <span class="token function">Widget</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
  <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// defined in the implementation file</span>
  Widget<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  size_t <span class="token function">real_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// in cpp file</span>
<span class="token keyword">class</span> <span class="token class-name">Widget</span><span class="token operator">::</span>impl <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment">// private data</span>
  <span class="token keyword">int</span> m<span class="token punctuation">;</span>
  <span class="token keyword">int</span> t<span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">&amp;</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Draw ("</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token function">impl</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> Widget<span class="token operator">::</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> pimpl<span class="token operator">-></span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
Widget<span class="token operator">::</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">:</span> pimpl<span class="token punctuation">{</span>std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>impl<span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Widget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
Widget<span class="token operator">&amp;</span> Widget<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
size_t Widget<span class="token operator">::</span><span class="token function">real_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace</span>

<span class="token function">TEST</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">,</span> pimpl_idiom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Widget <span class="token function">widget</span><span class="token punctuation">(</span><span class="token number">326</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  widget<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// the size of Widget is equal to size of std::unique_ptr</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// not equal to real object size</span>
  <span class="token function">ASSERT_NE</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> widget<span class="token punctuation">.</span><span class="token function">real_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>[To Be Continued]</p>
<h3 id="referencese"><a href="#referencese">Referencese</a></h3>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Application_binary_interface">Application binary interface</a>, Wikipedia</li>
<li><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">C++ Core Guidelines</a>, GitHub</li>
<li><a href="https://en.cppreference.com/w/cpp/language/pimpl">Pointer to implementation</a>, CppReference</li>
</ol>

      </div>
      <div id="gitalk-container">
      </div>
      <div class="footer">
        <div class="license">
          Except where otherwise noted, content on this site is licensed under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.
        </div>
        <div class="copyright">
          Copyright©2020 SF-Zhou, All Rights Reserved. Powered by <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://travis-ci.com/SF-Zhou/sf-zhou.github.io">Travis CI</a>.
        </div>
      </div>
    </div>
    <script src="/dist/gitalk.min.js"></script>
    <script src="/dist/main.js"></script>
  </body>
</html>
