<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/dist/favicon.ico">
    <link rel="apple-touch-icon" href="/dist/favicon.png">
    <link rel="stylesheet" type="text/css" href="/dist/highlight.css">
    <link rel="stylesheet" type="text/css" href="/dist/katex.min.css">
    <link rel="stylesheet" type="text/css" href="/dist/gitalk.css">
    <link rel="stylesheet" type="text/css" href="/dist/main.css">
    <title>[Reading] Source Code of LevelDB | SF-Zhou's Blog</title>
  </head>
  <body>
    <div class="app">
      <div class="title">
        <h1> [Reading] Source Code of LevelDB </h1>
      </div>
      <div class="info">
        <div class="date"> 2019.01.06 </div>
        <a href="https://github.com/SF-Zhou">
          <div class="author"> SF-Zhou </div>
        </a>
      </div>
      <div class="markdown">
        <blockquote>
<p><a href="https://github.com/google/leveldb">LevelDB</a> is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.</p>
</blockquote>
<h3 id="2019.01.06" tabindex="-1"><a href="#2019.01.06">2019.01.06</a></h3>
<p>Steps:</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/google/leveldb.git
<span class="token builtin class-name">cd</span> leveldb

<span class="token comment"># find CMakeLists.txt, so build it first</span>
<span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> -j <span class="token number">8</span>
<span class="token function">make</span> <span class="token builtin class-name">test</span>
</code></pre>
<p>Output of <code>make test</code>:</p>
<pre class="language-markup"><code class="language-markup">Running tests...
Test project /Users/sfzhou/Code/C++/leveldb/build
      Start  1: c_test
 1/29 Test  #1: c_test ...........................   Passed    0.24 sec
      Start  2: fault_injection_test
 2/29 Test  #2: fault_injection_test .............   Passed    1.83 sec
      Start  3: issue178_test
 3/29 Test  #3: issue178_test ....................   Passed   21.26 sec
      Start  4: issue200_test
 4/29 Test  #4: issue200_test ....................   Passed    0.01 sec
      Start  5: env_test
 5/29 Test  #5: env_test .........................   Passed    0.39 sec
      Start  6: status_test
 6/29 Test  #6: status_test ......................   Passed    0.00 sec
      Start  7: no_destructor_test
 7/29 Test  #7: no_destructor_test ...............   Passed    0.00 sec
      Start  8: autocompact_test
 8/29 Test  #8: autocompact_test .................   Passed   19.91 sec
      Start  9: corruption_test
 9/29 Test  #9: corruption_test ..................   Passed    1.41 sec
      Start 10: db_test
10/29 Test #10: db_test ..........................   Passed   65.26 sec
      Start 11: dbformat_test
11/29 Test #11: dbformat_test ....................   Passed    0.01 sec
      Start 12: filename_test
12/29 Test #12: filename_test ....................   Passed    0.01 sec
      Start 13: log_test
13/29 Test #13: log_test .........................   Passed    0.20 sec
      Start 14: recovery_test
14/29 Test #14: recovery_test ....................   Passed    0.07 sec
      Start 15: skiplist_test
15/29 Test #15: skiplist_test ....................   Passed    4.76 sec
      Start 16: version_edit_test
16/29 Test #16: version_edit_test ................   Passed    0.01 sec
      Start 17: version_set_test
17/29 Test #17: version_set_test .................   Passed    0.01 sec
      Start 18: write_batch_test
18/29 Test #18: write_batch_test .................   Passed    0.01 sec
      Start 19: memenv_test
19/29 Test #19: memenv_test ......................   Passed    0.02 sec
      Start 20: filter_block_test
20/29 Test #20: filter_block_test ................   Passed    0.01 sec
      Start 21: table_test
21/29 Test #21: table_test .......................   Passed    3.43 sec
      Start 22: arena_test
22/29 Test #22: arena_test .......................   Passed    0.30 sec
      Start 23: bloom_test
23/29 Test #23: bloom_test .......................   Passed    0.08 sec
      Start 24: cache_test
24/29 Test #24: cache_test .......................   Passed    0.01 sec
      Start 25: coding_test
25/29 Test #25: coding_test ......................   Passed    0.02 sec
      Start 26: crc32c_test
26/29 Test #26: crc32c_test ......................   Passed    0.01 sec
      Start 27: hash_test
27/29 Test #27: hash_test ........................   Passed    0.01 sec
      Start 28: logging_test
28/29 Test #28: logging_test .....................   Passed    0.01 sec
      Start 29: env_posix_test
29/29 Test #29: env_posix_test ...................   Passed    0.01 sec

100% tests passed, 0 tests failed out of 29

Total Test time (real) = 119.34 sec
</code></pre>
<p>Overview:</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># cd root dir of source code</span>

<span class="token comment"># count cc files</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> -name <span class="token string">"*.cc"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l
<span class="token comment">#> 73</span>

<span class="token comment"># count cc lines</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> -name <span class="token string">"*.cc"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cat</span> <span class="token operator">|</span> <span class="token function">wc</span> -l
<span class="token comment">#> 21240</span>

<span class="token comment"># A huge task :D</span>
<span class="token comment"># Continue tomorrow</span>
</code></pre>
<h3 id="2019.01.07" tabindex="-1"><a href="#2019.01.07">2019.01.07</a></h3>
<p>Welcome back! Continue this huge task.</p>
<pre class="language-bash"><code class="language-bash">tree include/
<span class="token comment">#> include</span>
<span class="token comment">#> └── leveldb</span>
<span class="token comment">#>     ├── c.h</span>
<span class="token comment">#>     ├── cache.h</span>
<span class="token comment">#>     ├── comparator.h</span>
<span class="token comment">#>     ├── db.h</span>
<span class="token comment">#>     ├── dumpfile.h</span>
<span class="token comment">#>     ├── env.h</span>
<span class="token comment">#>     ├── export.h</span>
<span class="token comment">#>     ├── filter_policy.h</span>
<span class="token comment">#>     ├── iterator.h</span>
<span class="token comment">#>     ├── options.h</span>
<span class="token comment">#>     ├── slice.h</span>
<span class="token comment">#>     ├── status.h</span>
<span class="token comment">#>     ├── table.h</span>
<span class="token comment">#>     ├── table_builder.h</span>
<span class="token comment">#>     └── write_batch.h</span>
</code></pre>
<p>Read these one by one. Firstly, <code>include/leveldb/c.h</code>:</p>
<pre class="language-c"><code class="language-c"><span class="token comment">/* Copyright (c) 2011 The LevelDB Authors. All rights reserved.
  Use of this source code is governed by a BSD-style license that can be
  found in the LICENSE file. See the AUTHORS file for names of contributors.

  C bindings for leveldb.  May be useful as a stable ABI that can be
  used by programs that keep leveldb in a shared library, or for
  a JNI api.
  ...
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">STORAGE_LEVELDB_INCLUDE_C_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STORAGE_LEVELDB_INCLUDE_C_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/export.h"</span></span>

<span class="token comment">// ...</span>
</code></pre>
<p>As mentioned in comment, this <code>C-style</code> header file is useful as a stable ABI that can be used by programs that keep leveldb in a shared library, or for a JNI api. This file include three standard C header files and <code>leveldb/export.h</code>. Check the contents of this file <code>include/leveldb/export.h</code>:</p>
<pre class="language-c"><code class="language-c"><span class="token comment">// Copyright (c) 2017 The LevelDB Authors. All rights reserved.</span>
<span class="token comment">// Use of this source code is governed by a BSD-style license that can be</span>
<span class="token comment">// found in the LICENSE file. See the AUTHORS file for names of contributors.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">STORAGE_LEVELDB_INCLUDE_EXPORT_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STORAGE_LEVELDB_INCLUDE_EXPORT_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_EXPORT<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_SHARED_LIBRARY<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_WIN32<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_COMPILE_LIBRARY<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_EXPORT</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_EXPORT</span> <span class="token expression"><span class="token function">__declspec</span><span class="token punctuation">(</span>dllimport<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// defined(LEVELDB_COMPILE_LIBRARY)</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span>  <span class="token comment">// defined(_WIN32)</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_COMPILE_LIBRARY<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_EXPORT</span> <span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">visibility</span><span class="token punctuation">(</span></span><span class="token string">"default"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_EXPORT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// defined(_WIN32)</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span>  <span class="token comment">// defined(LEVELDB_SHARED_LIBRARY)</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_EXPORT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(LEVELDB_EXPORT)</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// STORAGE_LEVELDB_INCLUDE_EXPORT_H_</span></span>
</code></pre>
<p>OK, this file defines macros related to the export API on different platforms. Back to <code>include/leveldb/c.h</code>:</p>
<pre class="language-c"><code class="language-c"><span class="token comment">/* Exported types */</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">leveldb_t</span>               <span class="token class-name">leveldb_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">leveldb_cache_t</span>         <span class="token class-name">leveldb_cache_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">leveldb_comparator_t</span>    <span class="token class-name">leveldb_comparator_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">leveldb_env_t</span>           <span class="token class-name">leveldb_env_t</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>

<span class="token comment">/* DB operations */</span>

LEVELDB_EXPORT <span class="token class-name">leveldb_t</span><span class="token operator">*</span> <span class="token function">leveldb_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">leveldb_options_t</span><span class="token operator">*</span> options<span class="token punctuation">,</span>
                                       <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> errptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">void</span> <span class="token function">leveldb_close</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">void</span> <span class="token function">leveldb_put</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span>
                                <span class="token keyword">const</span> <span class="token class-name">leveldb_writeoptions_t</span><span class="token operator">*</span> options<span class="token punctuation">,</span>
                                <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span> keylen<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> val<span class="token punctuation">,</span>
                                <span class="token class-name">size_t</span> vallen<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> errptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">void</span> <span class="token function">leveldb_delete</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> <span class="token class-name">leveldb_writeoptions_t</span><span class="token operator">*</span> options<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span> keylen<span class="token punctuation">,</span>
                                   <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> errptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">void</span> <span class="token function">leveldb_write</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> <span class="token class-name">leveldb_writeoptions_t</span><span class="token operator">*</span> options<span class="token punctuation">,</span>
                                  <span class="token class-name">leveldb_writebatch_t</span><span class="token operator">*</span> batch<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> errptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
</code></pre>
<p>Pre-defined structs like <code>leveldb_t</code>, and just use the pointer of this struct in export API. So it's fine. But I'd like to know the details of these structs. I found the corresponding definations in <code>db/c.cc</code>:</p>
<pre class="language-c"><code class="language-c"><span class="token comment">// ...</span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_t</span>              <span class="token punctuation">{</span> DB<span class="token operator">*</span>               rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_iterator_t</span>     <span class="token punctuation">{</span> Iterator<span class="token operator">*</span>         rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_writebatch_t</span>   <span class="token punctuation">{</span> WriteBatch        rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_snapshot_t</span>     <span class="token punctuation">{</span> <span class="token keyword">const</span> Snapshot<span class="token operator">*</span>   rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_readoptions_t</span>  <span class="token punctuation">{</span> ReadOptions       rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_writeoptions_t</span> <span class="token punctuation">{</span> WriteOptions      rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_options_t</span>      <span class="token punctuation">{</span> Options           rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_cache_t</span>        <span class="token punctuation">{</span> Cache<span class="token operator">*</span>            rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_seqfile_t</span>      <span class="token punctuation">{</span> SequentialFile<span class="token operator">*</span>   rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_randomfile_t</span>   <span class="token punctuation">{</span> RandomAccessFile<span class="token operator">*</span> rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_writablefile_t</span> <span class="token punctuation">{</span> WritableFile<span class="token operator">*</span>     rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_logger_t</span>       <span class="token punctuation">{</span> Logger<span class="token operator">*</span>           rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">leveldb_filelock_t</span>     <span class="token punctuation">{</span> FileLock<span class="token operator">*</span>         rep<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<p>OK, the struct just include a raw pointer to C++ object. The pointer name is unified to <code>rep</code>. Back to <code>include/leveldb/c.h</code>:</p>
<pre class="language-c"><code class="language-c"><span class="token comment">/* Returns NULL if not found.  A malloc()ed array otherwise.
   Stores the length of the array in *vallen. */</span>
LEVELDB_EXPORT <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">leveldb_get</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span>
                                 <span class="token keyword">const</span> <span class="token class-name">leveldb_readoptions_t</span><span class="token operator">*</span> options<span class="token punctuation">,</span>
                                 <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span> keylen<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> vallen<span class="token punctuation">,</span>
                                 <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> errptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token class-name">leveldb_iterator_t</span><span class="token operator">*</span> <span class="token function">leveldb_create_iterator</span><span class="token punctuation">(</span>
    <span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">leveldb_readoptions_t</span><span class="token operator">*</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">const</span> <span class="token class-name">leveldb_snapshot_t</span><span class="token operator">*</span> <span class="token function">leveldb_create_snapshot</span><span class="token punctuation">(</span><span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">)</span><span class="token punctuation">;</span>

LEVELDB_EXPORT <span class="token keyword">void</span> <span class="token function">leveldb_release_snapshot</span><span class="token punctuation">(</span>
    <span class="token class-name">leveldb_t</span><span class="token operator">*</span> db<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">leveldb_snapshot_t</span><span class="token operator">*</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
</code></pre>
<p><code>c.h</code> defines these APIs with good readability and appropriate comments. I'm here today :D</p>
<h3 id="2019.01.08" tabindex="-1"><a href="#2019.01.08">2019.01.08</a></h3>
<p>Continue. Today let's check the content of main <code>C++</code> header file: <code>include/leveldb/db.h</code>. Analyzing the dependencies of this header file and I found the dependency chain to be like:</p>
<pre class="language-markup"><code class="language-markup">slice.h -> status.h -> iterator.h -> db.h
option.h -> db.h
</code></pre>
<p>Great. Read <code>include/leveldb/slice.h</code> first:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Slice <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Create an empty slice.</span>
  <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> d<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size_</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

  <span class="token comment">// Intentionally copyable.</span>
  <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
  Slice<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data_<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> size_<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> size_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Return the ith byte in the referenced data.</span>
  <span class="token comment">// REQUIRES: n &lt; size()</span>
  <span class="token keyword">char</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Change this slice to refer to an empty array</span>
  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> data_ <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> size_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Drop the first "n" bytes from this slice.</span>
  <span class="token keyword">void</span> <span class="token function">remove_prefix</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data_ <span class="token operator">+=</span> n<span class="token punctuation">;</span>
    size_ <span class="token operator">-=</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  std<span class="token double-colon punctuation">::</span>string <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>data_<span class="token punctuation">,</span> size_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// Return true iff "x" is a prefix of "*this"</span>
  <span class="token keyword">bool</span> <span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_ <span class="token operator">>=</span> x<span class="token punctuation">.</span>size_<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>data_<span class="token punctuation">,</span> x<span class="token punctuation">.</span>data_<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size_<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data_<span class="token punctuation">;</span>
  size_t size_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token class-name">Slice</span><span class="token double-colon punctuation">::</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> size_t min_len <span class="token operator">=</span> <span class="token punctuation">(</span>size_ <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size_<span class="token punctuation">)</span> <span class="token operator">?</span> size_ <span class="token operator">:</span> b<span class="token punctuation">.</span>size_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>data_<span class="token punctuation">,</span> b<span class="token punctuation">.</span>data_<span class="token punctuation">,</span> min_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size_ <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size_<span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size_ <span class="token operator">></span> b<span class="token punctuation">.</span>size_<span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>

<span class="token comment">// ...</span>
</code></pre>
<p>OK, congratulation~ This is the first C++ class we met. <code>Slice</code> include two members, <code>data_</code> and <code>size_</code>. The tail of member's name is underline. <code>data_</code> is a common <code>const char *</code>, and the class is not responsible for the allocation and release of pointer memory.</p>
<p>OK, next one <code>include/leveldb/status.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Status <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Create a success status.</span>
  <span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">:</span> <span class="token function">state_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> state_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token function">Status</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Status<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">Status</span><span class="token punctuation">(</span>Status<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">:</span> <span class="token function">state_</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>state_<span class="token punctuation">)</span> <span class="token punctuation">{</span> rhs<span class="token punctuation">.</span>state_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  Status<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Status<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a success status.</span>
  <span class="token keyword">static</span> Status <span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> Status <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2 <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span>kNotFound<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> Status <span class="token function">Corruption</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2 <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span>kCorruption<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> Status <span class="token function">NotSupported</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2 <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span>kNotSupported<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> Status <span class="token function">InvalidArgument</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2 <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span>kInvalidArgument<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> Status <span class="token function">IOError</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2 <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Status</span><span class="token punctuation">(</span>kIOError<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">bool</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>state_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">IsNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> kNotFound<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">IsCorruption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> kCorruption<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">IsIOError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> kIOError<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">IsNotSupportedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> kNotSupported<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">IsInvalidArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> kInvalidArgument<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  std<span class="token double-colon punctuation">::</span>string <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// OK status has a null state_.  Otherwise, state_ is a new[] array</span>
  <span class="token comment">// of the following form:</span>
  <span class="token comment">//    state_[0..3] == length of message</span>
  <span class="token comment">//    state_[4]    == code</span>
  <span class="token comment">//    state_[5..]  == message</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> state_<span class="token punctuation">;</span>

  <span class="token keyword">enum</span> <span class="token class-name">Code</span> <span class="token punctuation">{</span>
    kOk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    kNotFound <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    kCorruption <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    kNotSupported <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
    kInvalidArgument <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    kIOError <span class="token operator">=</span> <span class="token number">5</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  Code <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>state_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> kOk <span class="token operator">:</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Code<span class="token operator">></span></span></span><span class="token punctuation">(</span>state_<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">Status</span><span class="token punctuation">(</span>Code code<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">CopyState</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
</code></pre>
<p><code>Status</code> class defines a <code>state_</code> pointer and several codes in <code>Code</code>. The form of <code>state_</code> is shown in comments. <code>state_</code> may be a <code>nullptr</code>, but it is safe to execute <code>delete [] nullptr</code> in <code>~Status</code>:D. <code>noexcept</code> is C++ 11 keyword and can declare the function not to throw any exceptions. The detail of <code>noexcept</code> could be found in <a href="https://en.cppreference.com/w/cpp/language/noexcept_spec">this link</a>. The other implementation of this class could be found in <code>util/status.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> type<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> kOk<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> kNotFound<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"NotFound: "</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> kCorruption<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"Corruption: "</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> kNotSupported<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"Not implemented: "</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> kInvalidArgument<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"Invalid argument: "</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> kIOError<span class="token operator">:</span>
        type <span class="token operator">=</span> <span class="token string">"IO error: "</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token function">snprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Unknown code(%d): "</span><span class="token punctuation">,</span>
                 <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        type <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>string <span class="token function">result</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> length<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>length<span class="token punctuation">,</span> state_<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>state_ <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
</code></pre>
<p>Use a switch statement to transfer <code>code</code> to string. <code>C</code> style string is used in this function, perhaps for better performance. OK, continue tomorrow. :D</p>
<h3 id="2019.01.10" tabindex="-1"><a href="#2019.01.10">2019.01.10</a></h3>
<p>😂 I was debuging last night. Let's continue <code>include/leveldb/iterator.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Iterator <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// SF: Implementation is shown in below</span>
  <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// SF: Delete copy constructor and copy assignment</span>
  <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> Iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Iterator<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Iterator<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token comment">// SF: Destructor is virtual</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// SF: Following functions are all virtual and assigned with zero. This class is a interface.</span>

  <span class="token comment">// An iterator is either positioned at a key/value pair, or</span>
  <span class="token comment">// not valid.  This method returns true iff the iterator is valid.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Position at the first key in the source.  The iterator is Valid()</span>
  <span class="token comment">// after this call iff the source is not empty.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Position at the last key in the source.  The iterator is</span>
  <span class="token comment">// Valid() after this call iff the source is not empty.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Position at the first key in the source that is at or past target.</span>
  <span class="token comment">// The iterator is Valid() after this call iff the source contains</span>
  <span class="token comment">// an entry that comes at or past target.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Moves to the next entry in the source.  After this call, Valid() is</span>
  <span class="token comment">// true iff the iterator was not positioned at the last entry in the source.</span>
  <span class="token comment">// REQUIRES: Valid()</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Moves to the previous entry in the source.  After this call, Valid() is</span>
  <span class="token comment">// true iff the iterator was not positioned at the first entry in source.</span>
  <span class="token comment">// REQUIRES: Valid()</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the key for the current entry.  The underlying storage for</span>
  <span class="token comment">// the returned slice is valid only until the next modification of</span>
  <span class="token comment">// the iterator.</span>
  <span class="token comment">// REQUIRES: Valid()</span>
  <span class="token keyword">virtual</span> Slice <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the value for the current entry.  The underlying storage for</span>
  <span class="token comment">// the returned slice is valid only until the next modification of</span>
  <span class="token comment">// the iterator.</span>
  <span class="token comment">// REQUIRES: Valid()</span>
  <span class="token keyword">virtual</span> Slice <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// If an error has occurred, return it.  Else return an ok status.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Clients are allowed to register function/arg1/arg2 triples that</span>
  <span class="token comment">// will be invoked when this iterator is destroyed.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Note that unlike all of the preceding methods, this method is</span>
  <span class="token comment">// not abstract and therefore clients should not override it.</span>
  <span class="token comment">// SF: declare a function type</span>
  <span class="token keyword">using</span> CleanupFunction <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg1<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">RegisterCleanup</span><span class="token punctuation">(</span>CleanupFunction function<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg1<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// Cleanup functions are stored in a single-linked list.</span>
  <span class="token comment">// The list's head node is inlined in the iterator.</span>
  <span class="token keyword">struct</span> <span class="token class-name">CleanupNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// The head node is used if the function pointer is not null.</span>
    CleanupFunction function<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> arg1<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> arg2<span class="token punctuation">;</span>
    CleanupNode<span class="token operator">*</span> next<span class="token punctuation">;</span>

    <span class="token comment">// True if the node is not used. Only head nodes might be unused.</span>
    <span class="token keyword">bool</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> function <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// Invokes the cleanup function.</span>
    <span class="token keyword">void</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span>function <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// SF: CleanupNode is a list. It store CleanupFunction with parameters.</span>
  CleanupNode cleanup_head_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Return an empty iterator (yields nothing).</span>
LEVELDB_EXPORT Iterator<span class="token operator">*</span> <span class="token function">NewEmptyIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return an empty iterator with the specified status.</span>
LEVELDB_EXPORT Iterator<span class="token operator">*</span> <span class="token function">NewErrorIterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p>My reading notes are written in comments and start with <code>SF:</code>. Check <code>table/iterator.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// SF: Init with nullptr</span>
  cleanup_head_<span class="token punctuation">.</span>function <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  cleanup_head_<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cleanup_head_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// SF: Run all cleanup function</span>
    cleanup_head_<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>CleanupNode<span class="token operator">*</span> node <span class="token operator">=</span> cleanup_head_<span class="token punctuation">.</span>next<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token operator">-></span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      CleanupNode<span class="token operator">*</span> next_node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
      <span class="token comment">// SF: Delete list node</span>
      <span class="token keyword">delete</span> node<span class="token punctuation">;</span>
      node <span class="token operator">=</span> next_node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterCleanup</span><span class="token punctuation">(</span>CleanupFunction func<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg1<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>func <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  CleanupNode<span class="token operator">*</span> node<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cleanup_head_<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node <span class="token operator">=</span> <span class="token operator">&amp;</span>cleanup_head_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// SF: Interesting. If you register [1, 2, 3, 4, 5] one by one, the list will be [1, 5, 4, 3, 2].</span>
    <span class="token comment">// better performance, ignore index</span>
    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CleanupNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    node<span class="token operator">-></span>next <span class="token operator">=</span> cleanup_head_<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    cleanup_head_<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  node<span class="token operator">-></span>function <span class="token operator">=</span> func<span class="token punctuation">;</span>
  node<span class="token operator">-></span>arg1 <span class="token operator">=</span> arg1<span class="token punctuation">;</span>
  node<span class="token operator">-></span>arg2 <span class="token operator">=</span> arg2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">EmptyIterator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Iterator</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">EmptyIterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">status_</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">EmptyIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token keyword">bool</span> <span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  Slice <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  Slice <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  Status <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> status_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  Status status_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// anonymous namespace</span>

Iterator<span class="token operator">*</span> <span class="token function">NewEmptyIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">EmptyIterator</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Iterator<span class="token operator">*</span> <span class="token function">NewErrorIterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">EmptyIterator</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p>Pay attention to the list insertion in above code. The <code>anonymous namespace</code> have numerous advantages and <a href="https://www.reddit.com/r/cpp/comments/4ukhh5/what_is_the_purpose_of_anonymous_namespaces/">there is a discussion of anonymous namespaces on Reddit</a>, quoted below:</p>
<blockquote>
<p>It will have external linkage if you do that (assuming you didn't declare it static.) The whole point is to avoid that. There are numerous advantages. The compiler can optimize better, since it knows that it can see all call sites/uses of the function; and it's a good way to avoid accidentally exporting unnecessary dynamic symbols when creating shared libraries. -- Rhomboid</p>
<p>That's the point, it protects you against <a href="https://en.wikipedia.org/wiki/One_Definition_Rule">ODR violations</a>, if you use the global namespace or a named namespace you may clash with another type/function/variable in another file. -- night_of_knee</p>
<p>The purpose of an anonymous namespace is to give things internal linkage. Functions declared outside of a class and not in an anonymous namespace (or declared <code>static</code>) will not have internal linkage. -- Drainedsoul</p>
</blockquote>
<p>OK. Continue tomorrow.</p>
<h3 id="2019.01.11" tabindex="-1"><a href="#2019.01.11">2019.01.11</a></h3>
<p><code>include/leveldb/option.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token comment">// SF: forward declaration</span>
<span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Env</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">FilterPolicy</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Logger</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Snapshot</span><span class="token punctuation">;</span>

<span class="token comment">// DB contents are stored in a set of blocks, each of which holds a</span>
<span class="token comment">// sequence of key,value pairs.  Each block may be compressed before</span>
<span class="token comment">// being stored in a file.  The following enum describes which</span>
<span class="token comment">// compression method (if any) is used to compress a block.</span>
<span class="token keyword">enum</span> <span class="token class-name">CompressionType</span> <span class="token punctuation">{</span>
  <span class="token comment">// NOTE: do not change the values of existing entries, as these are</span>
  <span class="token comment">// part of the persistent format on disk.</span>
  kNoCompression     <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
  kSnappyCompression <span class="token operator">=</span> <span class="token number">0x1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Options to control the behavior of a database (passed to DB::Open)</span>
<span class="token comment">// SF: struct that contains all options</span>
<span class="token keyword">struct</span> <span class="token class-name">LEVELDB_EXPORT</span> Options <span class="token punctuation">{</span>
  <span class="token comment">// -------------------</span>
  <span class="token comment">// Parameters that affect behavior</span>

  <span class="token comment">// Comparator used to define the order of keys in the table.</span>
  <span class="token comment">// Default: a comparator that uses lexicographic byte-wise ordering</span>
  <span class="token comment">//</span>
  <span class="token comment">// REQUIRES: The client must ensure that the comparator supplied</span>
  <span class="token comment">// here has the same name and orders keys *exactly* the same as the</span>
  <span class="token comment">// comparator provided to previous open calls on the same DB.</span>
  <span class="token keyword">const</span> Comparator<span class="token operator">*</span> comparator<span class="token punctuation">;</span>

  <span class="token comment">// If true, the database will be created if it is missing.</span>
  <span class="token comment">// Default: false</span>
  <span class="token keyword">bool</span> create_if_missing<span class="token punctuation">;</span>

  <span class="token comment">// If true, an error is raised if the database already exists.</span>
  <span class="token comment">// Default: false</span>
  <span class="token keyword">bool</span> error_if_exists<span class="token punctuation">;</span>

  <span class="token comment">// If true, the implementation will do aggressive checking of the</span>
  <span class="token comment">// data it is processing and will stop early if it detects any</span>
  <span class="token comment">// errors.  This may have unforeseen ramifications: for example, a</span>
  <span class="token comment">// corruption of one DB entry may cause a large number of entries to</span>
  <span class="token comment">// become unreadable or for the entire DB to become unopenable.</span>
  <span class="token comment">// Default: false</span>
  <span class="token keyword">bool</span> paranoid_checks<span class="token punctuation">;</span>

  <span class="token comment">// Use the specified object to interact with the environment,</span>
  <span class="token comment">// e.g. to read/write files, schedule background work, etc.</span>
  <span class="token comment">// Default: Env::Default()</span>
  Env<span class="token operator">*</span> env<span class="token punctuation">;</span>

  <span class="token comment">// Any internal progress/error information generated by the db will</span>
  <span class="token comment">// be written to info_log if it is non-null, or to a file stored</span>
  <span class="token comment">// in the same directory as the DB contents if info_log is null.</span>
  <span class="token comment">// Default: nullptr</span>
  Logger<span class="token operator">*</span> info_log<span class="token punctuation">;</span>

  <span class="token comment">// -------------------</span>
  <span class="token comment">// Parameters that affect performance</span>

  <span class="token comment">// Amount of data to build up in memory (backed by an unsorted log</span>
  <span class="token comment">// on disk) before converting to a sorted on-disk file.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Larger values increase performance, especially during bulk loads.</span>
  <span class="token comment">// Up to two write buffers may be held in memory at the same time,</span>
  <span class="token comment">// so you may wish to adjust this parameter to control memory usage.</span>
  <span class="token comment">// Also, a larger write buffer will result in a longer recovery time</span>
  <span class="token comment">// the next time the database is opened.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: 4MB</span>
  size_t write_buffer_size<span class="token punctuation">;</span>

  <span class="token comment">// Number of open files that can be used by the DB.  You may need to</span>
  <span class="token comment">// increase this if your database has a large working set (budget</span>
  <span class="token comment">// one open file per 2MB of working set).</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: 1000</span>
  <span class="token keyword">int</span> max_open_files<span class="token punctuation">;</span>

  <span class="token comment">// Control over blocks (user data is stored in a set of blocks, and</span>
  <span class="token comment">// a block is the unit of reading from disk).</span>

  <span class="token comment">// If non-null, use the specified cache for blocks.</span>
  <span class="token comment">// If null, leveldb will automatically create and use an 8MB internal cache.</span>
  <span class="token comment">// Default: nullptr</span>
  Cache<span class="token operator">*</span> block_cache<span class="token punctuation">;</span>

  <span class="token comment">// Approximate size of user data packed per block.  Note that the</span>
  <span class="token comment">// block size specified here corresponds to uncompressed data.  The</span>
  <span class="token comment">// actual size of the unit read from disk may be smaller if</span>
  <span class="token comment">// compression is enabled.  This parameter can be changed dynamically.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: 4K</span>
  size_t block_size<span class="token punctuation">;</span>

  <span class="token comment">// Number of keys between restart points for delta encoding of keys.</span>
  <span class="token comment">// This parameter can be changed dynamically.  Most clients should</span>
  <span class="token comment">// leave this parameter alone.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: 16</span>
  <span class="token keyword">int</span> block_restart_interval<span class="token punctuation">;</span>

  <span class="token comment">// Leveldb will write up to this amount of bytes to a file before</span>
  <span class="token comment">// switching to a new one.</span>
  <span class="token comment">// Most clients should leave this parameter alone.  However if your</span>
  <span class="token comment">// filesystem is more efficient with larger files, you could</span>
  <span class="token comment">// consider increasing the value.  The downside will be longer</span>
  <span class="token comment">// compactions and hence longer latency/performance hiccups.</span>
  <span class="token comment">// Another reason to increase this parameter might be when you are</span>
  <span class="token comment">// initially populating a large database.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: 2MB</span>
  size_t max_file_size<span class="token punctuation">;</span>

  <span class="token comment">// Compress blocks using the specified compression algorithm.  This</span>
  <span class="token comment">// parameter can be changed dynamically.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: kSnappyCompression, which gives lightweight but fast</span>
  <span class="token comment">// compression.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:</span>
  <span class="token comment">//    ~200-500MB/s compression</span>
  <span class="token comment">//    ~400-800MB/s decompression</span>
  <span class="token comment">// Note that these speeds are significantly faster than most</span>
  <span class="token comment">// persistent storage speeds, and therefore it is typically never</span>
  <span class="token comment">// worth switching to kNoCompression.  Even if the input data is</span>
  <span class="token comment">// incompressible, the kSnappyCompression implementation will</span>
  <span class="token comment">// efficiently detect that and will switch to uncompressed mode.</span>
  CompressionType compression<span class="token punctuation">;</span>

  <span class="token comment">// EXPERIMENTAL: If true, append to existing MANIFEST and log files</span>
  <span class="token comment">// when a database is opened.  This can significantly speed up open.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: currently false, but may become true later.</span>
  <span class="token keyword">bool</span> reuse_logs<span class="token punctuation">;</span>

  <span class="token comment">// If non-null, use the specified filter policy to reduce disk reads.</span>
  <span class="token comment">// Many applications will benefit from passing the result of</span>
  <span class="token comment">// NewBloomFilterPolicy() here.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: nullptr</span>
  <span class="token keyword">const</span> FilterPolicy<span class="token operator">*</span> filter_policy<span class="token punctuation">;</span>

  <span class="token comment">// Create an Options object with default values for all fields.</span>
  <span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Options that control read operations</span>
<span class="token keyword">struct</span> <span class="token class-name">LEVELDB_EXPORT</span> ReadOptions <span class="token punctuation">{</span>
  <span class="token comment">// If true, all data read from underlying storage will be</span>
  <span class="token comment">// verified against corresponding checksums.</span>
  <span class="token comment">// Default: false</span>
  <span class="token keyword">bool</span> verify_checksums<span class="token punctuation">;</span>

  <span class="token comment">// Should the data read for this iteration be cached in memory?</span>
  <span class="token comment">// Callers may wish to set this field to false for bulk scans.</span>
  <span class="token comment">// Default: true</span>
  <span class="token keyword">bool</span> fill_cache<span class="token punctuation">;</span>

  <span class="token comment">// If "snapshot" is non-null, read as of the supplied snapshot</span>
  <span class="token comment">// (which must belong to the DB that is being read and which must</span>
  <span class="token comment">// not have been released).  If "snapshot" is null, use an implicit</span>
  <span class="token comment">// snapshot of the state at the beginning of this read operation.</span>
  <span class="token comment">// Default: nullptr</span>
  <span class="token keyword">const</span> Snapshot<span class="token operator">*</span> snapshot<span class="token punctuation">;</span>

  <span class="token function">ReadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">verify_checksums</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">fill_cache</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">snapshot</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Options that control write operations</span>
<span class="token keyword">struct</span> <span class="token class-name">LEVELDB_EXPORT</span> WriteOptions <span class="token punctuation">{</span>
  <span class="token comment">// If true, the write will be flushed from the operating system</span>
  <span class="token comment">// buffer cache (by calling WritableFile::Sync()) before the write</span>
  <span class="token comment">// is considered complete.  If this flag is true, writes will be</span>
  <span class="token comment">// slower.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If this flag is false, and the machine crashes, some recent</span>
  <span class="token comment">// writes may be lost.  Note that if it is just the process that</span>
  <span class="token comment">// crashes (i.e., the machine does not reboot), no writes will be</span>
  <span class="token comment">// lost even if sync==false.</span>
  <span class="token comment">//</span>
  <span class="token comment">// In other words, a DB write with sync==false has similar</span>
  <span class="token comment">// crash semantics as the "write()" system call.  A DB write</span>
  <span class="token comment">// with sync==true has similar crash semantics to a "write()"</span>
  <span class="token comment">// system call followed by "fsync()".</span>
  <span class="token comment">//</span>
  <span class="token comment">// Default: false</span>
  <span class="token keyword">bool</span> sync<span class="token punctuation">;</span>

  <span class="token function">WriteOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p>Constructor of class <code>Options</code> is in <code>util/options.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token class-name">Options</span><span class="token double-colon punctuation">::</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token function">BytewiseComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">create_if_missing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">error_if_exists</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">paranoid_checks</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">env</span><span class="token punctuation">(</span><span class="token class-name">Env</span><span class="token double-colon punctuation">::</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">info_log</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">write_buffer_size</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">max_open_files</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">block_cache</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">block_size</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">block_restart_interval</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">max_file_size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">compression</span><span class="token punctuation">(</span>kSnappyCompression<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">reuse_logs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">filter_policy</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Class <code>Options</code> saved all related options to a database file. Pure struct type without complex function.</p>
<h3 id="2019.01.14" tabindex="-1"><a href="#2019.01.14">2019.01.14</a></h3>
<p>A happy weekend :D. Let's continue this huge task. Focus on the main header file: <code>include/leveldb/db.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token comment">// Update Makefile if you change these</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kMajorVersion <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kMinorVersion <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Options</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ReadOptions</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">WriteOptions</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">WriteBatch</span><span class="token punctuation">;</span>

<span class="token comment">// Abstract handle to particular state of a DB.</span>
<span class="token comment">// A Snapshot is an immutable object and can therefore be safely</span>
<span class="token comment">// accessed from multiple threads without any external synchronization.</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Snapshot <span class="token punctuation">{</span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// A range of keys</span>
<span class="token keyword">struct</span> <span class="token class-name">LEVELDB_EXPORT</span> Range <span class="token punctuation">{</span>
  Slice start<span class="token punctuation">;</span>          <span class="token comment">// Included in the range</span>
  Slice limit<span class="token punctuation">;</span>          <span class="token comment">// Not included in the range</span>

  <span class="token function">Range</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> l<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">start</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">limit</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p>Immutable object can be safely accessed from multiple threads without any external synchronization. The <code>Range</code> is a pair of <code>Slice</code>. Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> DB <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Open the database with the specified "name".</span>
  <span class="token comment">// Stores a pointer to a heap-allocated database in *dbptr and returns</span>
  <span class="token comment">// OK on success.</span>
  <span class="token comment">// Stores nullptr in *dbptr and returns a non-OK status on error.</span>
  <span class="token comment">// Caller should delete *dbptr when it is no longer needed.</span>
  <span class="token keyword">static</span> Status <span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">const</span> Options<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">,</span>
                     DB<span class="token operator">*</span><span class="token operator">*</span> dbptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">DB</span><span class="token punctuation">(</span><span class="token keyword">const</span> DB<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  DB<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> DB<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Set the database entry for "key" to "value".  Returns OK on success,</span>
  <span class="token comment">// and a non-OK status on error.</span>
  <span class="token comment">// Note: consider setting options.sync = true.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> WriteOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Remove the database entry (if any) for "key".  Returns OK on</span>
  <span class="token comment">// success, and a non-OK status on error.  It is not an error if "key"</span>
  <span class="token comment">// did not exist in the database.</span>
  <span class="token comment">// Note: consider setting options.sync = true.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">const</span> WriteOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Apply the specified updates to the database.</span>
  <span class="token comment">// Returns OK on success, non-OK on failure.</span>
  <span class="token comment">// Note: consider setting options.sync = true.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">const</span> WriteOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span> WriteBatch<span class="token operator">*</span> updates<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// If the database contains an entry for "key" store the</span>
  <span class="token comment">// corresponding value in *value and return OK.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If there is no entry for "key" leave *value unchanged and return</span>
  <span class="token comment">// a status for which Status::IsNotFound() returns true.</span>
  <span class="token comment">//</span>
  <span class="token comment">// May return some other Status on an error.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> ReadOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a heap-allocated iterator over the contents of the database.</span>
  <span class="token comment">// The result of NewIterator() is initially invalid (caller must</span>
  <span class="token comment">// call one of the Seek methods on the iterator before using it).</span>
  <span class="token comment">//</span>
  <span class="token comment">// Caller should delete the iterator when it is no longer needed.</span>
  <span class="token comment">// The returned iterator should be deleted before this db is deleted.</span>
  <span class="token keyword">virtual</span> Iterator<span class="token operator">*</span> <span class="token function">NewIterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> ReadOptions<span class="token operator">&amp;</span> options<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a handle to the current DB state.  Iterators created with</span>
  <span class="token comment">// this handle will all observe a stable snapshot of the current DB</span>
  <span class="token comment">// state.  The caller must call ReleaseSnapshot(result) when the</span>
  <span class="token comment">// snapshot is no longer needed.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">const</span> Snapshot<span class="token operator">*</span> <span class="token function">GetSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Release a previously acquired snapshot.  The caller must not</span>
  <span class="token comment">// use "snapshot" after this call.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ReleaseSnapshot</span><span class="token punctuation">(</span><span class="token keyword">const</span> Snapshot<span class="token operator">*</span> snapshot<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// DB implementations can export properties about their state</span>
  <span class="token comment">// via this method.  If "property" is a valid property understood by this</span>
  <span class="token comment">// DB implementation, fills "*value" with its current value and returns</span>
  <span class="token comment">// true.  Otherwise returns false.</span>
  <span class="token comment">//</span>
  <span class="token comment">//</span>
  <span class="token comment">// Valid property names include:</span>
  <span class="token comment">//</span>
  <span class="token comment">//  "leveldb.num-files-at-level&lt;N>" - return the number of files at level &lt;N>,</span>
  <span class="token comment">//     where &lt;N> is an ASCII representation of a level number (e.g. "0").</span>
  <span class="token comment">//  "leveldb.stats" - returns a multi-line string that describes statistics</span>
  <span class="token comment">//     about the internal operation of the DB.</span>
  <span class="token comment">//  "leveldb.sstables" - returns a multi-line string that describes all</span>
  <span class="token comment">//     of the sstables that make up the db contents.</span>
  <span class="token comment">//  "leveldb.approximate-memory-usage" - returns the approximate number of</span>
  <span class="token comment">//     bytes of memory in use by the DB.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> property<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// For each i in [0,n-1], store in "sizes[i]", the approximate</span>
  <span class="token comment">// file system space used by keys in "[range[i].start .. range[i].limit)".</span>
  <span class="token comment">//</span>
  <span class="token comment">// Note that the returned sizes measure file system space usage, so</span>
  <span class="token comment">// if the user data compresses by a factor of ten, the returned</span>
  <span class="token comment">// sizes will be one-tenth the size of the corresponding user data size.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The results may not include the sizes of recently written data.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetApproximateSizes</span><span class="token punctuation">(</span><span class="token keyword">const</span> Range<span class="token operator">*</span> range<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>
                                   <span class="token keyword">uint64_t</span><span class="token operator">*</span> sizes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Compact the underlying storage for the key range [*begin,*end].</span>
  <span class="token comment">// In particular, deleted and overwritten versions are discarded,</span>
  <span class="token comment">// and the data is rearranged to reduce the cost of operations</span>
  <span class="token comment">// needed to access the data.  This operation should typically only</span>
  <span class="token comment">// be invoked by users who understand the underlying implementation.</span>
  <span class="token comment">//</span>
  <span class="token comment">// begin==nullptr is treated as a key before all keys in the database.</span>
  <span class="token comment">// end==nullptr is treated as a key after all keys in the database.</span>
  <span class="token comment">// Therefore the following call will compact the entire database:</span>
  <span class="token comment">//    db->CompactRange(nullptr, nullptr);</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CompactRange</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">*</span> begin<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">*</span> end<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>There is no  member in <code>DB</code> class. The <code>Open</code> function is more like a factory to construct derive object from <code>options</code>. Check the implementation of this function in <code>db/db_impl.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp">Status <span class="token class-name">DB</span><span class="token double-colon punctuation">::</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">const</span> Options<span class="token operator">&amp;</span> options<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span>
                DB<span class="token operator">*</span><span class="token operator">*</span> dbptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span>dbptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

  DBImpl<span class="token operator">*</span> impl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DBImpl</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> dbname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  impl<span class="token operator">-></span>mutex_<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  VersionEdit edit<span class="token punctuation">;</span>
  <span class="token comment">// Recover handles create_if_missing, error_if_exists</span>
  <span class="token keyword">bool</span> save_manifest <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  Status s <span class="token operator">=</span> impl<span class="token operator">-></span><span class="token function">Recover</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>edit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>save_manifest<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> impl<span class="token operator">-></span>mem_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Create new log and a corresponding memtable.</span>
    <span class="token keyword">uint64_t</span> new_log_number <span class="token operator">=</span> impl<span class="token operator">-></span>versions_<span class="token operator">-></span><span class="token function">NewFileNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    WritableFile<span class="token operator">*</span> lfile<span class="token punctuation">;</span>
    s <span class="token operator">=</span> options<span class="token punctuation">.</span>env<span class="token operator">-></span><span class="token function">NewWritableFile</span><span class="token punctuation">(</span><span class="token function">LogFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> new_log_number<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                     <span class="token operator">&amp;</span>lfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      edit<span class="token punctuation">.</span><span class="token function">SetLogNumber</span><span class="token punctuation">(</span>new_log_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
      impl<span class="token operator">-></span>logfile_ <span class="token operator">=</span> lfile<span class="token punctuation">;</span>
      impl<span class="token operator">-></span>logfile_number_ <span class="token operator">=</span> new_log_number<span class="token punctuation">;</span>
      impl<span class="token operator">-></span>log_ <span class="token operator">=</span> <span class="token keyword">new</span> log<span class="token double-colon punctuation">::</span><span class="token function">Writer</span><span class="token punctuation">(</span>lfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
      impl<span class="token operator">-></span>mem_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MemTable</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>internal_comparator_<span class="token punctuation">)</span><span class="token punctuation">;</span>
      impl<span class="token operator">-></span>mem_<span class="token operator">-></span><span class="token function">Ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> save_manifest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    edit<span class="token punctuation">.</span><span class="token function">SetPrevLogNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// No older logs needed after recovery.</span>
    edit<span class="token punctuation">.</span><span class="token function">SetLogNumber</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>logfile_number_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> impl<span class="token operator">-></span>versions_<span class="token operator">-></span><span class="token function">LogAndApply</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>edit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>impl<span class="token operator">-></span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    impl<span class="token operator">-></span><span class="token function">DeleteObsoleteFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    impl<span class="token operator">-></span><span class="token function">MaybeScheduleCompaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  impl<span class="token operator">-></span>mutex_<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>impl<span class="token operator">-></span>mem_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>dbptr <span class="token operator">=</span> impl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span> impl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>DBImpl</code> class is the real implementation of <code>DB</code> and it hides detail design.</p>
<h3 id="2019.01.15" tabindex="-1"><a href="#2019.01.15">2019.01.15</a></h3>
<p>Today let's analyze what happended when we ran the code follow:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/db.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. open db</span>
  leveldb<span class="token double-colon punctuation">::</span>DB <span class="token operator">*</span>db<span class="token punctuation">;</span>
  leveldb<span class="token double-colon punctuation">::</span>Options options<span class="token punctuation">;</span>
  options<span class="token punctuation">.</span>create_if_missing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  leveldb<span class="token double-colon punctuation">::</span>Status status <span class="token operator">=</span> leveldb<span class="token double-colon punctuation">::</span><span class="token class-name">DB</span><span class="token double-colon punctuation">::</span><span class="token function">Open</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token string">"testdb"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 2. write into db</span>
  leveldb<span class="token double-colon punctuation">::</span>WriteOptions write_options<span class="token punctuation">;</span>
  db<span class="token operator">-></span><span class="token function">Put</span><span class="token punctuation">(</span>write_options<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 3. read from db</span>
  std<span class="token double-colon punctuation">::</span>string value<span class="token punctuation">;</span>
  db<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>leveldb<span class="token double-colon punctuation">::</span><span class="token function">ReadOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Step 1,  call <code>leveldb::DB::Open</code> in <code>db/db_impl.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp">Status <span class="token class-name">DB</span><span class="token double-colon punctuation">::</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">const</span> Options<span class="token operator">&amp;</span> options<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span>
                DB<span class="token operator">*</span><span class="token operator">*</span> dbptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span>dbptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

  DBImpl<span class="token operator">*</span> impl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DBImpl</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> dbname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p><code>DBImpl</code> is a complex class declared in <code>db/db_impl.h</code>. Its constructor is also defined in <code>db/db_impl.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token class-name">DBImpl</span><span class="token double-colon punctuation">::</span><span class="token function">DBImpl</span><span class="token punctuation">(</span><span class="token keyword">const</span> Options<span class="token operator">&amp;</span> raw_options<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">env_</span><span class="token punctuation">(</span>raw_options<span class="token punctuation">.</span>env<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">internal_comparator_</span><span class="token punctuation">(</span>raw_options<span class="token punctuation">.</span>comparator<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">internal_filter_policy_</span><span class="token punctuation">(</span>raw_options<span class="token punctuation">.</span>filter_policy<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">options_</span><span class="token punctuation">(</span><span class="token function">SanitizeOptions</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>internal_comparator_<span class="token punctuation">,</span>
                               <span class="token operator">&amp;</span>internal_filter_policy_<span class="token punctuation">,</span> raw_options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">owns_info_log_</span><span class="token punctuation">(</span>options_<span class="token punctuation">.</span>info_log <span class="token operator">!=</span> raw_options<span class="token punctuation">.</span>info_log<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">owns_cache_</span><span class="token punctuation">(</span>options_<span class="token punctuation">.</span>block_cache <span class="token operator">!=</span> raw_options<span class="token punctuation">.</span>block_cache<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">dbname_</span><span class="token punctuation">(</span>dbname<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">table_cache_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TableCache</span><span class="token punctuation">(</span>dbname_<span class="token punctuation">,</span> options_<span class="token punctuation">,</span> <span class="token function">TableCacheSize</span><span class="token punctuation">(</span>options_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">db_lock_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">shutting_down_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">background_work_finished_signal_</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">mem_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">imm_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">logfile_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">logfile_number_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">log_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">seed_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">tmp_batch_</span><span class="token punctuation">(</span><span class="token keyword">new</span> WriteBatch<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">background_compaction_scheduled_</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">manual_compaction_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">versions_</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">VersionSet</span><span class="token punctuation">(</span>dbname_<span class="token punctuation">,</span> <span class="token operator">&amp;</span>options_<span class="token punctuation">,</span> table_cache_<span class="token punctuation">,</span>
                               <span class="token operator">&amp;</span>internal_comparator_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  has_imm_<span class="token punctuation">.</span><span class="token function">Release_Store</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Step 2, call <code>db-&gt;Put</code> in <code>db/db_impl.cc</code> too:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Default implementations of convenience methods that subclasses of DB</span>
<span class="token comment">// can call if they wish</span>
Status <span class="token class-name">DB</span><span class="token double-colon punctuation">::</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> WriteOptions<span class="token operator">&amp;</span> opt<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  WriteBatch batch<span class="token punctuation">;</span>
  batch<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">Write</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>batch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Here constructs a batch with key-value pair and writes this batch with <code>Write</code> function. <code>Write</code> is a virtual function and call <code>DBImpl::Write</code> in <code>db_impl.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
Status <span class="token class-name">DBImpl</span><span class="token double-colon punctuation">::</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">const</span> WriteOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span> WriteBatch<span class="token operator">*</span> my_batch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Writer <span class="token function">w</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  w<span class="token punctuation">.</span>batch <span class="token operator">=</span> my_batch<span class="token punctuation">;</span>
  w<span class="token punctuation">.</span>sync <span class="token operator">=</span> options<span class="token punctuation">.</span>sync<span class="token punctuation">;</span>
  w<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  writers_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>w<span class="token punctuation">.</span>done <span class="token operator">&amp;&amp;</span> <span class="token operator">&amp;</span>w <span class="token operator">!=</span> writers_<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    w<span class="token punctuation">.</span>cv<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> w<span class="token punctuation">.</span>status<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// May temporarily unlock and wait.</span>
  Status status <span class="token operator">=</span> <span class="token function">MakeRoomForWrite</span><span class="token punctuation">(</span>my_batch <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> last_sequence <span class="token operator">=</span> versions_<span class="token operator">-></span><span class="token function">LastSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Writer<span class="token operator">*</span> last_writer <span class="token operator">=</span> <span class="token operator">&amp;</span>w<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> my_batch <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// nullptr batch is for compactions</span>
    WriteBatch<span class="token operator">*</span> updates <span class="token operator">=</span> <span class="token function">BuildBatchGroup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>last_writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WriteBatchInternal</span><span class="token double-colon punctuation">::</span><span class="token function">SetSequence</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> last_sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    last_sequence <span class="token operator">+=</span> <span class="token class-name">WriteBatchInternal</span><span class="token double-colon punctuation">::</span><span class="token function">Count</span><span class="token punctuation">(</span>updates<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Add to log and apply to memtable.  We can release the lock</span>
    <span class="token comment">// during this phase since &amp;w is currently responsible for logging</span>
    <span class="token comment">// and protects against concurrent loggers and concurrent writes</span>
    <span class="token comment">// into mem_.</span>
    <span class="token punctuation">{</span>
      mutex_<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      status <span class="token operator">=</span> log_<span class="token operator">-></span><span class="token function">AddRecord</span><span class="token punctuation">(</span><span class="token class-name">WriteBatchInternal</span><span class="token double-colon punctuation">::</span><span class="token function">Contents</span><span class="token punctuation">(</span>updates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">bool</span> sync_error <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status <span class="token operator">=</span> logfile_<span class="token operator">-></span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          sync_error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status <span class="token operator">=</span> <span class="token class-name">WriteBatchInternal</span><span class="token double-colon punctuation">::</span><span class="token function">InsertInto</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> mem_<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      mutex_<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sync_error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The state of the log file is indeterminate: the log record we</span>
        <span class="token comment">// just added may or may not show up when the DB is re-opened.</span>
        <span class="token comment">// So we force the DB into a mode where all future writes fail.</span>
        <span class="token function">RecordBackgroundError</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>updates <span class="token operator">==</span> tmp_batch_<span class="token punctuation">)</span> tmp_batch_<span class="token operator">-></span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    versions_<span class="token operator">-></span><span class="token function">SetLastSequence</span><span class="token punctuation">(</span>last_sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Writer<span class="token operator">*</span> ready <span class="token operator">=</span> writers_<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    writers_<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready <span class="token operator">!=</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ready<span class="token operator">-></span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
      ready<span class="token operator">-></span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      ready<span class="token operator">-></span>cv<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ready <span class="token operator">==</span> last_writer<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Notify new head of write queue</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>writers_<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    writers_<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>cv<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
</code></pre>
<p>It is a complex function and I will analyze it carefully later. The similar step will happend in step 3. <code>db-&gt;Get</code> call call <code>DBImpl::Get</code> in <code>db_impl.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp">Status <span class="token class-name">DBImpl</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> ReadOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Status s<span class="token punctuation">;</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  SequenceNumber snapshot<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>snapshot <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    snapshot <span class="token operator">=</span>
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> SnapshotImpl<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>snapshot<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sequence_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    snapshot <span class="token operator">=</span> versions_<span class="token operator">-></span><span class="token function">LastSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  MemTable<span class="token operator">*</span> mem <span class="token operator">=</span> mem_<span class="token punctuation">;</span>
  MemTable<span class="token operator">*</span> imm <span class="token operator">=</span> imm_<span class="token punctuation">;</span>
  Version<span class="token operator">*</span> current <span class="token operator">=</span> versions_<span class="token operator">-></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mem<span class="token operator">-></span><span class="token function">Ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> imm<span class="token operator">-></span><span class="token function">Ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  current<span class="token operator">-></span><span class="token function">Ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">bool</span> have_stat_update <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  Version<span class="token double-colon punctuation">::</span>GetStats stats<span class="token punctuation">;</span>

  <span class="token comment">// Unlock while reading from files and memtables</span>
  <span class="token punctuation">{</span>
    mutex_<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// First look in the memtable, then in the immutable memtable (if any).</span>
    LookupKey <span class="token function">lkey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>lkey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Done</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> imm<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>lkey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Done</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      s <span class="token operator">=</span> current<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> lkey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stats<span class="token punctuation">)</span><span class="token punctuation">;</span>
      have_stat_update <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    mutex_<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>have_stat_update <span class="token operator">&amp;&amp;</span> current<span class="token operator">-></span><span class="token function">UpdateStats</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MaybeScheduleCompaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  mem<span class="token operator">-></span><span class="token function">Unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> imm<span class="token operator">-></span><span class="token function">Unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  current<span class="token operator">-></span><span class="token function">Unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2019.01.17" tabindex="-1"><a href="#2019.01.17">2019.01.17</a></h3>
<p>OK let's contine. Recall the <code>DBImpl::Get</code> function:</p>
<pre class="language-cpp"><code class="language-cpp">Status <span class="token class-name">DBImpl</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> ReadOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Status s<span class="token punctuation">;</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>mutex_</code> is defined in <code>db/db_impl.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DBImpl</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DB</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// State below is protected by mutex_</span>
  port<span class="token double-colon punctuation">::</span>Mutex mutex_<span class="token punctuation">;</span>
  port<span class="token double-colon punctuation">::</span>AtomicPointer shutting_down_<span class="token punctuation">;</span>
  port<span class="token double-colon punctuation">::</span>CondVar background_work_finished_signal_ <span class="token function">GUARDED_BY</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p><code>port</code> is a independent module declared in <code>port</code> directory. Description in <code>port/README</code>:</p>
<blockquote>
<p>This directory contains interfaces and implementations that isolate the rest of the package from platform details.</p>
<p>Code in the rest of the package includes &quot;port.h&quot; from this directory. &quot;port.h&quot; in turn includes a platform specific &quot;port_&lt;platform&gt;.h&quot; file that provides the platform specific implementation.</p>
<p>See port_stdcxx.h for an example of what must be provided in a platform specific header file.</p>
</blockquote>
<p>Check files in <code>port</code> folder:</p>
<pre class="language-bash"><code class="language-bash">tree port
<span class="token comment">#> port</span>
<span class="token comment">#> ├── README</span>
<span class="token comment">#> ├── atomic_pointer.h</span>
<span class="token comment">#> ├── port.h</span>
<span class="token comment">#> ├── port_config.h.in</span>
<span class="token comment">#> ├── port_example.h</span>
<span class="token comment">#> ├── port_stdcxx.h</span>
<span class="token comment">#> ├── thread_annotations.h</span>
<span class="token comment">#> └── win</span>
<span class="token comment">#>     └── stdint.h</span>
</code></pre>
<p><code>port/port.h</code></p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Include the appropriate platform specific file below.  If you are</span>
<span class="token comment">// porting to a new platform, see "port_example.h" for documentation</span>
<span class="token comment">// of what the new port_&lt;platform>.h file must provide.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_PLATFORM_POSIX<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">include</span> <span class="token string">"port/port_stdcxx.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_PLATFORM_CHROMIUM<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">include</span> <span class="token string">"port/port_chromium.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre>
<p>The macro <code>LEVELDB_PLATFORM_POSIX</code> is set in <code>CMakeLists.txt</code>:</p>
<pre class="language-cmake"><code class="language-cmake"><span class="token comment"># Line 195</span>
<span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>leveldb
  <span class="token namespace">PRIVATE</span>
    <span class="token comment"># Used by include/export.h when building shared libraries.</span>
    LEVELDB_COMPILE_LIBRARY
    <span class="token comment"># Used by port/port.h.</span>
    LEVELDB_PLATFORM_POSIX=<span class="token number">1</span>
<span class="token punctuation">)</span>
</code></pre>
<p>Check <code>port/port_stdcxx.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// port/port_config.h availability is automatically detected via __has_include</span>
<span class="token comment">// in newer compilers. If LEVELDB_HAS_PORT_CONFIG_H is defined, it overrides the</span>
<span class="token comment">// configuration detection.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_HAS_PORT_CONFIG_H<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">LEVELDB_HAS_PORT_CONFIG_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port_config.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// LEVELDB_HAS_PORT_CONFIG_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__has_include<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">__has_include</span><span class="token punctuation">(</span></span><span class="token string">"port/port_config.h"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port_config.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// __has_include("port/port_config.h")</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// defined(LEVELDB_HAS_PORT_CONFIG_H)</span></span>
<span class="token comment">// ...</span>
</code></pre>
<p>The macro <code>LEVELDB_HAS_PORT_CONFIG_H</code> is set in <code>CMakeLists.txt:204</code>:</p>
<pre class="language-cmake"><code class="language-cmake"><span class="token comment"># Test whether C++17 __has_include is available.</span>
<span class="token function">check_cxx_source_compiles</span><span class="token punctuation">(</span><span class="token string">"
#if defined(__has_include) &amp;&amp;  __has_include(&lt;string>)
#include &lt;string>
#endif
int main() { std::string str; return 0; }
"</span> HAVE_CXX17_HAS_INCLUDE<span class="token punctuation">)</span>

<span class="token comment"># ...</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> HAVE_CXX17_HAS_INCLUDE<span class="token punctuation">)</span>
  <span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span>leveldb
    <span class="token namespace">PRIVATE</span>
      LEVELDB_HAS_PORT_CONFIG_H=<span class="token number">1</span>
  <span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token operator">NOT</span> HAVE_CXX17_HAS_INCLUDE<span class="token punctuation">)</span>
</code></pre>
<p><code>HAVE_CXX17_HAS_INCLUDE</code> is true if <code>__has_include</code> is available. A <code>__has_include</code> result of 1 only means that a header or source file with the specified name exists (<a href="https://en.cppreference.com/w/cpp/preprocessor/include">link</a>). <code>check_cxx_source_compiles</code> is a CMake function and can check that the source supplied in <code>code</code> can be compiled as a C++ source file and linked as an executable (<a href="https://cmake.org/cmake/help/latest/module/CheckCXXSourceCompiles.html">link</a>). In my mac <code>HAVE_CXX17_HAS_INCLUDE</code> is true.</p>
<p>To be continued.</p>
<h3 id="2019.01.22" tabindex="-1"><a href="#2019.01.22">2019.01.22</a></h3>
<p>I'm back and continue reading <code>port/port_stdcxx.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">__has_include</span><span class="token punctuation">(</span></span><span class="token string">"port/port_config.h"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port_config.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// __has_include("port/port_config.h")</span></span>
</code></pre>
<p>In <code>port</code> folder there is no <code>port_config.h</code> file, but a <code>port_config.h.in</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token comment">// Define to 1 if you have a definition for fdatasync() in &lt;unistd.h>.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_FUNC_FDATASYNC<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmakedefine</span><span class="token expression"><span class="token number">01</span> HAVE_FUNC_FDATASYNC</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_FUNC_FDATASYNC)</span></span>

<span class="token comment">// Define to 1 if you have Google CRC32C.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_CRC32C<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmakedefine</span><span class="token expression"><span class="token number">01</span> HAVE_CRC32C</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_CRC32C)</span></span>

<span class="token comment">// Define to 1 if you have Google Snappy.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_SNAPPY<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">cmakedefine</span><span class="token expression"><span class="token number">01</span> HAVE_SNAPPY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_SNAPPY)</span></span>
<span class="token comment">// ...</span>
</code></pre>
<p>In fact in <code>CMakeLists.txt</code> L67:</p>
<pre class="language-cmake"><code class="language-cmake"><span class="token keyword">configure_file</span><span class="token punctuation">(</span>
  <span class="token string">"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/port/port_config.h.in"</span>
  <span class="token string">"<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span></span>/<span class="token interpolation"><span class="token punctuation">${</span><span class="token variable">LEVELDB_PORT_CONFIG_DIR</span><span class="token punctuation">}</span></span>/port_config.h"</span>
<span class="token punctuation">)</span>
</code></pre>
<p><code>configure_file</code> is a CMake function and can copy a file to another location and modify its contents. Input file lines of the form “#cmakedefine01 VAR” will be replaced with either “#define VAR 1” or “#define VAR 0” similarly (<a href="https://cmake.org/cmake/help/v3.0/command/configure_file.html">link</a>). You can find <code>port_config.h</code> in <code>build/include/port</code> after build:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Define to 1 if you have a definition for fdatasync() in &lt;unistd.h>.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_FUNC_FDATASYNC<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAVE_FUNC_FDATASYNC</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_FUNC_FDATASYNC)</span></span>

<span class="token comment">// Define to 1 if you have Google CRC32C.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_CRC32C<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAVE_CRC32C</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_CRC32C)</span></span>

<span class="token comment">// Define to 1 if you have Google Snappy.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>HAVE_SNAPPY<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HAVE_SNAPPY</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// !defined(HAVE_SNAPPY)</span></span>
</code></pre>
<p>The defined macro will affect the include header files in <code>port/port_stdcxx.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_CRC32C</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;crc32c/crc32c.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// HAVE_CRC32C</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">HAVE_SNAPPY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;snappy.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// HAVE_SNAPPY</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span>  <span class="token comment">// NOLINT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span>               <span class="token comment">// NOLINT</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/atomic_pointer.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/thread_annotations.h"</span></span>
</code></pre>
<p>The comment <code>NOLINT</code> will affect <code>clang-format</code> lint. Check <code>port/atomic_pointer.h</code> first:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token comment">// AtomicPointer provides storage for a lock-free pointer.</span>
<span class="token comment">// Platform-dependent implementation of AtomicPointer:</span>
<span class="token comment">// - If the platform provides a cheap barrier, we use it with raw pointers</span>
<span class="token comment">// - If &lt;atomic> is present (on newer versions of gcc, it is), we use</span>
<span class="token comment">//   a &lt;atomic>-based AtomicPointer.  However we prefer the memory</span>
<span class="token comment">//   barrier based version, because at least on a gcc 4.4 32-bit build</span>
<span class="token comment">//   on linux, we have encountered a buggy &lt;atomic> implementation.</span>
<span class="token comment">//   Also, some &lt;atomic> implementations are much slower than a memory-barrier</span>
<span class="token comment">//   based implementation (~16ns for &lt;atomic> based acquire-load vs. ~1ns for</span>
<span class="token comment">//   a barrier based acquire-load).</span>
<span class="token comment">// This code is based on atomicops-internals-* in Google's perftools:</span>
<span class="token comment">// http://code.google.com/p/google-perftools/source/browse/#svn%2Ftrunk%2Fsrc%2Fbase</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">PORT_ATOMIC_POINTER_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT_ATOMIC_POINTER_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">OS_WIN</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_M_X64<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_X86_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_M_IX86<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__i386__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__i386<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_X86_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__ARMEL__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_ARM_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_ARM64_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__ppc__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__powerpc__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__powerpc64__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_PPC_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__mips__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARCH_CPU_MIPS_FAMILY</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">// ...</span>
</code></pre>
<p>This header comment is important so I take it off. It introduce <code>what-how-why</code> briefly. Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Define MemoryBarrier() if available</span>
<span class="token comment">// Windows on x86</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>OS_WIN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>COMPILER_MSVC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_X86_FAMILY<span class="token punctuation">)</span></span></span>
<span class="token comment">// windows.h already provides a MemoryBarrier(void) macro</span>
<span class="token comment">// http://msdn.microsoft.com/en-us/library/ms684208(v=vs.85).aspx</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// Mac OS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__APPLE__<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">atomic_thread_fence</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_seq_cst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// Gcc on x86</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_X86_FAMILY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// See http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html for a discussion on</span>
  <span class="token comment">// this idiom. Also see http://en.wikipedia.org/wiki/Memory_ordering.</span>
  __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// Sun Studio</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_X86_FAMILY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__SUNPRO_CC<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// See http://gcc.gnu.org/ml/gcc/2003-04/msg01180.html for a discussion on</span>
  <span class="token comment">// this idiom. Also see http://en.wikipedia.org/wiki/Memory_ordering.</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// ARM Linux</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_ARM_FAMILY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__linux__<span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>LinuxKernelMemoryBarrierFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// The Linux ARM kernel provides a highly optimized device-specific memory</span>
<span class="token comment">// barrier function at a fixed memory address that is mapped in every</span>
<span class="token comment">// user-level process.</span>
<span class="token comment">//</span>
<span class="token comment">// This beats using CPU-specific instructions which are, on single-core</span>
<span class="token comment">// devices, un-necessary and very costly (e.g. ARMv7-A "dmb" takes more</span>
<span class="token comment">// than 180ns on a Cortex-A8 like the one on a Nexus One). Benchmarking</span>
<span class="token comment">// shows that the extra function call cost is completely negligible on</span>
<span class="token comment">// multi-core devices.</span>
<span class="token comment">//</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>LinuxKernelMemoryBarrierFunc<span class="token punctuation">)</span><span class="token number">0xffff0fa0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// ARM64</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_ARM64_FAMILY<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"dmb sy"</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// PPC</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_PPC_FAMILY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO for some powerpc expert: is there a cheaper suitable variant?</span>
  <span class="token comment">// Perhaps by having separate barriers for acquire and release ops.</span>
  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"sync"</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token comment">// MIPS</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>ARCH_CPU_MIPS_FAMILY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span></span></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span><span class="token string">"sync"</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEVELDB_HAVE_MEMORY_BARRIER</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre>
<p>The implementations of <code>MemoryBarrier</code> on various platforms with full comments. In my opinion this is idiom and you can just copy it when you need to use it. <code>MemoryBarrier</code> can enforce an ordering constraint on memory operations issued before and after the barrier instruction (<a href="https://en.wikipedia.org/wiki/Memory_barrier">link to Wikipedia</a>). Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// AtomicPointer built using platform-specific MemoryBarrier().</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>LEVELDB_HAVE_MEMORY_BARRIER<span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">AtomicPointer</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">void</span><span class="token operator">*</span> rep_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">AtomicPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">explicit</span> <span class="token function">AtomicPointer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">rep_</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">NoBarrier_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rep_<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">NoBarrier_Store</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span> rep_ <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Acquire_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span><span class="token operator">*</span> result <span class="token operator">=</span> rep_<span class="token punctuation">;</span>
    <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Release_Store</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MemoryBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rep_ <span class="token operator">=</span> v<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// AtomicPointer based on C++11 &lt;atomic>.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">class</span> <span class="token class-name">AtomicPointer</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span> rep_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">AtomicPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">explicit</span> <span class="token function">AtomicPointer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">rep_</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Acquire_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rep_<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Release_Store</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rep_<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">NoBarrier_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rep_<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">NoBarrier_Store</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rep_<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre>
<p>Analyze <code>AtomicPointer</code> based on C++11 atomic first. It implements with diffenrent memory orders (<a href="https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering">link to CppReference</a>). For <code>AtomicPointer</code> built using platform-specific <code>MemoryBarrier()</code>, <code>Acquire_Load</code> and <code>Release_Store</code> use <code>MemoryBarrier</code> to maintain the read/write synchronization.</p>
<h3 id="2019.01.27" tabindex="-1"><a href="#2019.01.27">2019.01.27</a></h3>
<p>Continue reading <code>port/port_stdcxx.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> kLittleEndian <span class="token operator">=</span> <span class="token operator">!</span>LEVELDB_IS_BIG_ENDIAN<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CondVar</span><span class="token punctuation">;</span>

<span class="token comment">// Thinly wraps std::mutex.</span>
<span class="token keyword">class</span> <span class="token class-name">LOCKABLE</span> Mutex <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">Mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">Mutex</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mutex<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Mutex<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Mutex<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">EXCLUSIVE_LOCK_FUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> mu_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">UNLOCK_FUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> mu_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">AssertHeld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">ASSERT_EXCLUSIVE_LOCK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">CondVar</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>mutex mu_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Thinly wraps std::condition_variable.</span>
<span class="token keyword">class</span> <span class="token class-name">CondVar</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">CondVar</span><span class="token punctuation">(</span>Mutex<span class="token operator">*</span> mu<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">mu_</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">assert</span><span class="token punctuation">(</span>mu <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">CondVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">CondVar</span><span class="token punctuation">(</span><span class="token keyword">const</span> CondVar<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  CondVar<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> CondVar<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mu_<span class="token operator">-></span>mu_<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cv_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cv_<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SignalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cv_<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>condition_variable cv_<span class="token punctuation">;</span>
  Mutex<span class="token operator">*</span> <span class="token keyword">const</span> mu_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p>As mentioned in comments, here thinly warps <code>std::mutex</code> and <code>std::condition_variable</code>. OK let's back to the <code>DBImpl::Get</code> function:</p>
<pre class="language-cpp"><code class="language-cpp">Status <span class="token class-name">DBImpl</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> ReadOptions<span class="token operator">&amp;</span> options<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
                   std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Status s<span class="token punctuation">;</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  SequenceNumber snapshot<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>snapshot <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    snapshot <span class="token operator">=</span>
        <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> SnapshotImpl<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>snapshot<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">sequence_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    snapshot <span class="token operator">=</span> versions_<span class="token operator">-></span><span class="token function">LastSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p><code>SequenceNumber</code> is <code>uint64_t</code> actually. <code>version_</code> is object of <code>VersionSet</code> defined in <code>db/version_set.h</code>. <code>VersionSet</code> depends on <code>db/dbformat.h</code> and <code>db/version_edit.h</code>. Check <code>db/dbformat.h</code> first:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/comparator.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/db.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/filter_policy.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/slice.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/table_builder.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/coding.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/logging.h"</span></span>
<span class="token comment">// ...</span>
</code></pre>
<p>OK, check <code>util/coding.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/slice.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port.h"</span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token comment">// Standard Put... routines append to a string</span>
<span class="token keyword">void</span> <span class="token function">PutFixed32</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">PutFixed64</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">PutVarint32</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">PutVarint64</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Standard Get... routines parse a value from the beginning of a Slice</span>
<span class="token comment">// and advance the slice past the parsed value.</span>
<span class="token keyword">bool</span> <span class="token function">GetVarint32</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">GetVarint64</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> input<span class="token punctuation">,</span> Slice<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre>
<p>Implementations of these functions:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">EncodeFixed32</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>port<span class="token double-colon punctuation">::</span>kLittleEndian<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PutFixed32</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">EncodeFixed32</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dst<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">EncodeVarint64</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> B <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">>=</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token punctuation">(</span>B<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> B<span class="token punctuation">;</span>
    v <span class="token operator">>>=</span> <span class="token number">7</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PutVarint64</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">EncodeVarint64</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dst<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dst<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>PutFixed32</code> simply append bytes of <code>uint32_t</code> value to <code>string</code>. <code>EncodeVarint64</code> is more interesting. It uses most high bit to indicate that if this is the last byte of varint value. For decode:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Internal routine for use by fallback path of GetVarint32Ptr</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetVarint32PtrFallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> limit<span class="token punctuation">,</span>
                                   <span class="token keyword">uint32_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetVarint32Ptr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> limit<span class="token punctuation">,</span>
                                  <span class="token keyword">uint32_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>
      <span class="token keyword">return</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">GetVarint32PtrFallback</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetVarint32PtrFallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> limit<span class="token punctuation">,</span>
                                   <span class="token keyword">uint32_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">uint32_t</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> shift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> shift <span class="token operator">&lt;=</span> <span class="token number">28</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> shift <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> byte <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// More bytes are present</span>
      result <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result <span class="token operator">|=</span> <span class="token punctuation">(</span>byte <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span>value <span class="token operator">=</span> result<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">GetVarint32</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> input<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> input<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> limit <span class="token operator">=</span> p <span class="token operator">+</span> input<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">GetVarint32Ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>input <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> limit <span class="token operator">-</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Use <code>inline</code> to accelerate <code>GetVarint32Ptr</code> in small value cases.</p>
<h3 id="2019.01.28" tabindex="-1"><a href="#2019.01.28">2019.01.28</a></h3>
<p>Continue. Check <code>util/logging.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">Slice</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">WritableFile</span><span class="token punctuation">;</span>

<span class="token comment">// Append a human-readable printout of "num" to *str</span>
<span class="token keyword">void</span> <span class="token function">AppendNumberTo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Append a human-readable printout of "value" to *str.</span>
<span class="token comment">// Escapes any non-printable characters found in "value".</span>
<span class="token keyword">void</span> <span class="token function">AppendEscapedStringTo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return a human-readable printout of "num"</span>
std<span class="token double-colon punctuation">::</span>string <span class="token function">NumberToString</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return a human-readable version of "value".</span>
<span class="token comment">// Escapes any non-printable characters found in "value".</span>
std<span class="token double-colon punctuation">::</span>string <span class="token function">EscapeString</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Parse a human-readable number from "*in" into *value.  On success,</span>
<span class="token comment">// advances "*in" past the consumed number and sets "*val" to the</span>
<span class="token comment">// numeric value.  Otherwise, returns false and leaves *in in an</span>
<span class="token comment">// unspecified state.</span>
<span class="token keyword">bool</span> <span class="token function">ConsumeDecimalNumber</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p><code>util/logging.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token keyword">void</span> <span class="token function">AppendEscapedStringTo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'~'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      str<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\\x%02x"</span><span class="token punctuation">,</span>
               <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      str<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token function">ConsumeDecimalNumber</span><span class="token punctuation">(</span>Slice<span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">*</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Constants that will be optimized away.</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> kMaxUint64 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span> kLastDigitOfMaxUint64 <span class="token operator">=</span>
      <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>kMaxUint64 <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">uint64_t</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// reinterpret_cast-ing from char* to unsigned char* to avoid signedness.</span>
  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> start <span class="token operator">=</span>
      <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>in<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> end <span class="token operator">=</span> start <span class="token operator">+</span> in<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> current <span class="token operator">=</span> start<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> current <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token operator">*</span>current<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">// Overflow check.</span>
    <span class="token comment">// kMaxUint64 / 10 is also constant and will be optimized away.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> kMaxUint64 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>value <span class="token operator">==</span> kMaxUint64 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">></span> kLastDigitOfMaxUint64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    value <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">const</span> size_t digits_consumed <span class="token operator">=</span> current <span class="token operator">-</span> start<span class="token punctuation">;</span>
  in<span class="token operator">-></span><span class="token function">remove_prefix</span><span class="token punctuation">(</span>digits_consumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> digits_consumed <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
</code></pre>
<p>The code is precise and simple.</p>
<h3 id="2019.01.29" tabindex="-1"><a href="#2019.01.29">2019.01.29</a></h3>
<p>View <code>db/dbformat.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Grouping of constants.  We may want to make some of these</span>
<span class="token comment">// parameters set via options.</span>
<span class="token keyword">namespace</span> config <span class="token punctuation">{</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kNumLevels <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// Level-0 compaction is started when we hit this many files.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kL0_CompactionTrigger <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// Soft limit on number of level-0 files.  We slow down writes at this point.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kL0_SlowdownWritesTrigger <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

<span class="token comment">// Maximum number of level-0 files.  We stop writes at this point.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kL0_StopWritesTrigger <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// Maximum level to which a new compacted memtable is pushed if it</span>
<span class="token comment">// does not create overlap.  We try to push to level 2 to avoid the</span>
<span class="token comment">// relatively expensive level 0=>1 compactions and to avoid some</span>
<span class="token comment">// expensive manifest file operations.  We do not push all the way to</span>
<span class="token comment">// the largest level since that can generate a lot of wasted disk</span>
<span class="token comment">// space if the same key space is being repeatedly overwritten.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kMaxMemCompactLevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// Approximate gap in bytes between samples of data read during iteration.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kReadBytesPeriod <span class="token operator">=</span> <span class="token number">1048576</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace config</span>
</code></pre>
<p>Configs with full comments. Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">ValueType</span> <span class="token punctuation">{</span>
  kTypeDeletion <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span>
  kTypeValue <span class="token operator">=</span> <span class="token number">0x1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> ValueType kValueTypeForSeek <span class="token operator">=</span> kTypeValue<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">uint64_t</span> SequenceNumber<span class="token punctuation">;</span>

<span class="token comment">// We leave eight bits empty at the bottom so a type and sequence#</span>
<span class="token comment">// can be packed together into 64-bits.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> SequenceNumber kMaxSequenceNumber <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x1ull</span> <span class="token operator">&lt;&lt;</span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">ParsedInternalKey</span> <span class="token punctuation">{</span>
  Slice user_key<span class="token punctuation">;</span>
  SequenceNumber sequence<span class="token punctuation">;</span>
  ValueType type<span class="token punctuation">;</span>

  <span class="token function">ParsedInternalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment">// Intentionally left uninitialized (for speed)</span>
  <span class="token function">ParsedInternalKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> u<span class="token punctuation">,</span> <span class="token keyword">const</span> SequenceNumber<span class="token operator">&amp;</span> seq<span class="token punctuation">,</span> ValueType t<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">user_key</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sequence</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">DebugString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"' @ %llu : %d"</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> sequence<span class="token punctuation">,</span>
             <span class="token keyword">int</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> <span class="token string">"'"</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span> <span class="token function">EscapeString</span><span class="token punctuation">(</span>user_key<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span> buf<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Return the length of the encoding of "key".</span>
<span class="token keyword">inline</span> size_t <span class="token function">InternalKeyEncodingLength</span><span class="token punctuation">(</span><span class="token keyword">const</span> ParsedInternalKey<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> key<span class="token punctuation">.</span>user_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// SF: seq(7 byte) + value_tyep(1 byte) = 8 byte</span>
<span class="token keyword">static</span> <span class="token keyword">uint64_t</span> <span class="token function">PackSequenceAndType</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> seq<span class="token punctuation">,</span> ValueType t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>seq <span class="token operator">&lt;=</span> kMaxSequenceNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>t <span class="token operator">&lt;=</span> kValueTypeForSeek<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>seq <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Append the serialization of "key" to *result.</span>
<span class="token keyword">void</span> <span class="token function">AppendInternalKey</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> result<span class="token punctuation">,</span> <span class="token keyword">const</span> ParsedInternalKey<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  result<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>user_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>user_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">PutFixed64</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">PackSequenceAndType</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>sequence<span class="token punctuation">,</span> key<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Attempt to parse an internal key from "internal_key".  On success,</span>
<span class="token comment">// stores the parsed data in "*result", and returns true.</span>
<span class="token comment">//</span>
<span class="token comment">// On error, returns false, leaves "*result" in an undefined state.</span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">ParseInternalKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> internal_key<span class="token punctuation">,</span>
                             ParsedInternalKey<span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> size_t n <span class="token operator">=</span> internal_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// SF: last 8 byte</span>
  <span class="token keyword">uint64_t</span> num <span class="token operator">=</span> <span class="token function">DecodeFixed64</span><span class="token punctuation">(</span>internal_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
  result<span class="token operator">-></span>sequence <span class="token operator">=</span> num <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>
  result<span class="token operator">-></span>type <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>ValueType<span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  result<span class="token operator">-></span>user_key <span class="token operator">=</span> <span class="token function">Slice</span><span class="token punctuation">(</span>internal_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>kTypeValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Returns the user key portion of an internal key.</span>
<span class="token keyword">inline</span> Slice <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> internal_key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>internal_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>internal_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> internal_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Implementation of <code>ParsedInternalKey</code> (Reordered).</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// A comparator for internal keys that uses a specified comparator for</span>
<span class="token comment">// the user key portion and breaks ties by decreasing sequence number.</span>
<span class="token keyword">class</span> <span class="token class-name">InternalKeyComparator</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Comparator</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">const</span> Comparator<span class="token operator">*</span> user_comparator_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">InternalKeyComparator</span><span class="token punctuation">(</span><span class="token keyword">const</span> Comparator<span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">user_comparator_</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FindShortestSeparator</span><span class="token punctuation">(</span>
      std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> start<span class="token punctuation">,</span>
      <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> limit<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FindShortSuccessor</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> Comparator<span class="token operator">*</span> <span class="token function">user_comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> user_comparator_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">InternalKeyComparator</span><span class="token double-colon punctuation">::</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"leveldb.InternalKeyComparator"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token class-name">InternalKeyComparator</span><span class="token double-colon punctuation">::</span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> akey<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> bkey<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// Order by:</span>
  <span class="token comment">//    increasing user key (according to user-supplied comparator)</span>
  <span class="token comment">//    decreasing sequence number</span>
  <span class="token comment">//    decreasing type (though sequence# should be enough to disambiguate)</span>
  <span class="token keyword">int</span> r <span class="token operator">=</span> user_comparator_<span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>akey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>bkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> anum <span class="token operator">=</span> <span class="token function">DecodeFixed64</span><span class="token punctuation">(</span>akey<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> akey<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> bnum <span class="token operator">=</span> <span class="token function">DecodeFixed64</span><span class="token punctuation">(</span>bkey<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bkey<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// SF: decreasing sequence number and type</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anum <span class="token operator">></span> bnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anum <span class="token operator">&lt;</span> bnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">InternalKeyComparator</span><span class="token double-colon punctuation">::</span><span class="token function">FindShortestSeparator</span><span class="token punctuation">(</span>
      std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> start<span class="token punctuation">,</span>
      <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> limit<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// Attempt to shorten the user portion of the key</span>
  Slice user_start <span class="token operator">=</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Slice user_limit <span class="token operator">=</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">tmp</span><span class="token punctuation">(</span>user_start<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user_start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  user_comparator_<span class="token operator">-></span><span class="token function">FindShortestSeparator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> user_limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> user_start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      user_comparator_<span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span>user_start<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// User key has become shorter physically, but larger logically.</span>
    <span class="token comment">// Tack on the earliest possible number to the shortened user key.</span>
    <span class="token function">PutFixed64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token function">PackSequenceAndType</span><span class="token punctuation">(</span>kMaxSequenceNumber<span class="token punctuation">,</span>kValueTypeForSeek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> limit<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    start<span class="token operator">-></span><span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">InternalKeyComparator</span><span class="token double-colon punctuation">::</span><span class="token function">FindShortSuccessor</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  Slice user_key <span class="token operator">=</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span><span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string <span class="token function">tmp</span><span class="token punctuation">(</span>user_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  user_comparator_<span class="token operator">-></span><span class="token function">FindShortSuccessor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> user_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      user_comparator_<span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span>user_key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// User key has become shorter physically, but larger logically.</span>
    <span class="token comment">// Tack on the earliest possible number to the shortened user key.</span>
    <span class="token function">PutFixed64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token function">PackSequenceAndType</span><span class="token punctuation">(</span>kMaxSequenceNumber<span class="token punctuation">,</span>kValueTypeForSeek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token operator">*</span>key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    key<span class="token operator">-></span><span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token class-name">InternalKeyComparator</span><span class="token double-colon punctuation">::</span><span class="token function">Compare</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Compare</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Implementation of <code>InternalKeyComparator</code>. It is not clear what function <code>FindShortestSeparator</code> and <code>FindShortSuccessor</code> do now.</p>
<h3 id="2019.02.07" tabindex="-1"><a href="#2019.02.07">2019.02.07</a></h3>
<p>View <code>include/leveldb/filter_policy.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> FilterPolicy <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">FilterPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the name of this policy.  Note that if the filter encoding</span>
  <span class="token comment">// changes in an incompatible way, the name returned by this method</span>
  <span class="token comment">// must be changed.  Otherwise, old incompatible filters may be</span>
  <span class="token comment">// passed to methods of this type.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// keys[0,n-1] contains a list of keys (potentially with duplicates)</span>
  <span class="token comment">// that are ordered according to the user supplied comparator.</span>
  <span class="token comment">// Append a filter that summarizes keys[0,n-1] to *dst.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Warning: do not change the initial contents of *dst.  Instead,</span>
  <span class="token comment">// append the newly constructed filter to *dst.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CreateFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// "filter" contains the data appended by a preceding call to</span>
  <span class="token comment">// CreateFilter() on this class.  This method must return true if</span>
  <span class="token comment">// the key was in the list of keys passed to CreateFilter().</span>
  <span class="token comment">// This method may return true or false if the key was not on the</span>
  <span class="token comment">// list, but it should aim to return false with a high probability.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">KeyMayMatch</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> filter<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Return a new filter policy that uses a bloom filter with approximately</span>
<span class="token comment">// the specified number of bits per key.  A good value for bits_per_key</span>
<span class="token comment">// is 10, which yields a filter with ~ 1% false positive rate.</span>
<span class="token comment">//</span>
<span class="token comment">// Callers must delete the result after any database that is using the</span>
<span class="token comment">// result has been closed.</span>
LEVELDB_EXPORT <span class="token keyword">const</span> FilterPolicy<span class="token operator">*</span> <span class="token function">NewBloomFilterPolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits_per_key<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// SF: filter_policy.cc</span>
<span class="token class-name">FilterPolicy</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">FilterPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre>
<p>Function <code>NewBloomFilterPolicy</code> is defined in <code>util/bloom.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> <span class="token punctuation">{</span>
<span class="token keyword">static</span> <span class="token keyword">uint32_t</span> <span class="token function">BloomHash</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0xbc9f1d34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">BloomFilterPolicy</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FilterPolicy</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  size_t bits_per_key_<span class="token punctuation">;</span>
  size_t k_<span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">BloomFilterPolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits_per_key<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">bits_per_key_</span><span class="token punctuation">(</span>bits_per_key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// We intentionally round down to reduce probing cost a little bit</span>
    k_ <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>bits_per_key <span class="token operator">*</span> <span class="token number">0.69</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.69 =~ ln(2)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k_ <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> k_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k_ <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> k_ <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"leveldb.BuiltinBloomFilter2"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CreateFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token comment">// Compute bloom filter size (in both bits and bytes)</span>
    size_t bits <span class="token operator">=</span> n <span class="token operator">*</span> bits_per_key_<span class="token punctuation">;</span>

    <span class="token comment">// For small n, we can see a very high false positive rate.  Fix it</span>
    <span class="token comment">// by enforcing a minimum bloom filter length.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bits <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> bits <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>

    size_t bytes <span class="token operator">=</span> <span class="token punctuation">(</span>bits <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>
    bits <span class="token operator">=</span> bytes <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> size_t init_size <span class="token operator">=</span> dst<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dst<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span>init_size <span class="token operator">+</span> bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dst<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>k_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Remember # of probes in filter</span>
    <span class="token keyword">char</span><span class="token operator">*</span> array <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>dst<span class="token punctuation">)</span><span class="token punctuation">[</span>init_size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Use double-hashing to generate a sequence of hash values.</span>
      <span class="token comment">// See analysis in [Kirsch,Mitzenmacher 2006].</span>
      <span class="token comment">// SF: core part: double-hashing</span>
      <span class="token keyword">uint32_t</span> h <span class="token operator">=</span> <span class="token function">BloomHash</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> delta <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Rotate right 17 bits</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k_<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> bitpos <span class="token operator">=</span> h <span class="token operator">%</span> bits<span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>bitpos<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitpos <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        h <span class="token operator">+=</span> delta<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">KeyMayMatch</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> bloom_filter<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> size_t len <span class="token operator">=</span> bloom_filter<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> array <span class="token operator">=</span> bloom_filter<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> size_t bits <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token comment">// Use the encoded k so that we can read filters generated by</span>
    <span class="token comment">// bloom filters created using different parameters.</span>
    <span class="token keyword">const</span> size_t k <span class="token operator">=</span> array<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Reserved for potentially new encodings for short bloom filters.</span>
      <span class="token comment">// Consider it a match.</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">uint32_t</span> h <span class="token operator">=</span> <span class="token function">BloomHash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> delta <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Rotate right 17 bits</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> bitpos <span class="token operator">=</span> h <span class="token operator">%</span> bits<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>bitpos<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>bitpos <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      h <span class="token operator">+=</span> delta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> FilterPolicy<span class="token operator">*</span> <span class="token function">NewBloomFilterPolicy</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits_per_key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">BloomFilterPolicy</span><span class="token punctuation">(</span>bits_per_key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Function <code>Hash</code> is defined in <code>util/hash.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">uint32_t</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">,</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Similar to murmur hash</span>
  <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> m <span class="token operator">=</span> <span class="token number">0xc6a4a793</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> r <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> limit <span class="token operator">=</span> data <span class="token operator">+</span> n<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> h <span class="token operator">=</span> seed <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Pick up four bytes at a time</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> w <span class="token operator">=</span> <span class="token function">DecodeFixed32</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    h <span class="token operator">+=</span> w<span class="token punctuation">;</span>
    h <span class="token operator">*=</span> m<span class="token punctuation">;</span>
    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Pick up remaining bytes</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>limit <span class="token operator">-</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
      h <span class="token operator">+=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
      FALLTHROUGH_INTENDED<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
      h <span class="token operator">+=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
      FALLTHROUGH_INTENDED<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
      h <span class="token operator">+=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      h <span class="token operator">*=</span> m<span class="token punctuation">;</span>
      h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>></span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> h<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This is simple string hash. <code>FilterPolicy</code> is just a <code>Policy</code> and not responsible for filter storage.</p>
<h3 id="2019.02.10" tabindex="-1"><a href="#2019.02.10">2019.02.10</a></h3>
<p>I'm on train G118 now. Continue <code>db/dbformat.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Filter policy wrapper that converts from internal keys to user keys</span>
<span class="token keyword">class</span> <span class="token class-name">InternalFilterPolicy</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FilterPolicy</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">const</span> FilterPolicy<span class="token operator">*</span> <span class="token keyword">const</span> user_policy_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">InternalFilterPolicy</span><span class="token punctuation">(</span><span class="token keyword">const</span> FilterPolicy<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">user_policy_</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CreateFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">KeyMayMatch</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> filter<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// dbformat.cc</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">InternalFilterPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> user_policy_<span class="token operator">-></span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">InternalFilterPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">CreateFilter</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">*</span> keys<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>
                                        std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// We rely on the fact that the code in table.cc does not mind us</span>
  <span class="token comment">// adjusting keys[].</span>
  Slice<span class="token operator">*</span> mkey <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Slice<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mkey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// TODO(sanjay): Suppress dups?</span>
  <span class="token punctuation">}</span>
  user_policy_<span class="token operator">-></span><span class="token function">CreateFilter</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> n<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">InternalFilterPolicy</span><span class="token double-colon punctuation">::</span><span class="token function">KeyMayMatch</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> f<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> user_policy_<span class="token operator">-></span><span class="token function">KeyMayMatch</span><span class="token punctuation">(</span><span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>InternalFilterPolicy</code> is a shallow wrapper on <code>FilterPolicy</code> for internel key.</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Modules in this directory should keep internal keys wrapped inside</span>
<span class="token comment">// the following class instead of plain strings so that we do not</span>
<span class="token comment">// incorrectly use string comparisons instead of an InternalKeyComparator.</span>
<span class="token keyword">class</span> <span class="token class-name">InternalKey</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  std<span class="token double-colon punctuation">::</span>string rep_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">InternalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>   <span class="token comment">// Leave rep_ as empty to indicate it is invalid</span>
  <span class="token function">InternalKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> user_key<span class="token punctuation">,</span> SequenceNumber s<span class="token punctuation">,</span> ValueType t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">AppendInternalKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rep_<span class="token punctuation">,</span> <span class="token function">ParsedInternalKey</span><span class="token punctuation">(</span>user_key<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">DecodeFrom</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> rep_<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  Slice <span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>rep_<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rep_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Slice <span class="token function">user_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">ExtractUserKey</span><span class="token punctuation">(</span>rep_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">SetFrom</span><span class="token punctuation">(</span><span class="token keyword">const</span> ParsedInternalKey<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rep_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">AppendInternalKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rep_<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> rep_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  std<span class="token double-colon punctuation">::</span>string <span class="token function">DebugString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>string <span class="token class-name">InternalKey</span><span class="token double-colon punctuation">::</span><span class="token function">DebugString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>string result<span class="token punctuation">;</span>
  ParsedInternalKey parsed<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ParseInternalKey</span><span class="token punctuation">(</span>rep_<span class="token punctuation">,</span> <span class="token operator">&amp;</span>parsed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> parsed<span class="token punctuation">.</span><span class="token function">DebugString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token string">"(bad)"</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">EscapeString</span><span class="token punctuation">(</span>rep_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The management of <code>Slice</code> memory need to be considered futher more.</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// A helper class useful for DBImpl::Get()</span>
<span class="token keyword">class</span> <span class="token class-name">LookupKey</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Initialize *this for looking up user_key at a snapshot with</span>
  <span class="token comment">// the specified sequence number.</span>
  <span class="token function">LookupKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> user_key<span class="token punctuation">,</span> SequenceNumber sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token operator">~</span><span class="token function">LookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a key suitable for lookup in a MemTable.</span>
  Slice <span class="token function">memtable_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>start_<span class="token punctuation">,</span> end_ <span class="token operator">-</span> start_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Return an internal key (suitable for passing to an internal iterator)</span>
  Slice <span class="token function">internal_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>kstart_<span class="token punctuation">,</span> end_ <span class="token operator">-</span> kstart_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Return the user key</span>
  Slice <span class="token function">user_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>kstart_<span class="token punctuation">,</span> end_ <span class="token operator">-</span> kstart_ <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// We construct a char array of the form:</span>
  <span class="token comment">//    klength  varint32               &lt;-- start_</span>
  <span class="token comment">//    userkey  char[klength]          &lt;-- kstart_</span>
  <span class="token comment">//    tag      uint64</span>
  <span class="token comment">//                                    &lt;-- end_</span>
  <span class="token comment">// The array is a suitable MemTable key.</span>
  <span class="token comment">// The suffix starting with "userkey" can be used as an InternalKey.</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> start_<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> kstart_<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> end_<span class="token punctuation">;</span>
  <span class="token keyword">char</span> space_<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// Avoid allocation for short keys</span>

  <span class="token comment">// No copying allowed</span>
  <span class="token function">LookupKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> LookupKey<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> LookupKey<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token class-name">LookupKey</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">LookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start_ <span class="token operator">!=</span> space_<span class="token punctuation">)</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">LookupKey</span><span class="token double-colon punctuation">::</span><span class="token function">LookupKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> user_key<span class="token punctuation">,</span> SequenceNumber s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  size_t usize <span class="token operator">=</span> user_key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t needed <span class="token operator">=</span> usize <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">;</span>  <span class="token comment">// A conservative estimate</span>
  <span class="token comment">// SF: varint32 (at most 5 byte) + tag (8 byte)</span>
  <span class="token keyword">char</span><span class="token operator">*</span> dst<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>needed <span class="token operator">&lt;=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>space_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dst <span class="token operator">=</span> space_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>needed<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  start_ <span class="token operator">=</span> dst<span class="token punctuation">;</span>
  dst <span class="token operator">=</span> <span class="token function">EncodeVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> usize <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  kstart_ <span class="token operator">=</span> dst<span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> user_key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> usize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dst <span class="token operator">+=</span> usize<span class="token punctuation">;</span>
  <span class="token function">EncodeFixed64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token function">PackSequenceAndType</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> kValueTypeForSeek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dst <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  end_ <span class="token operator">=</span> dst<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2019.02.16" tabindex="-1"><a href="#2019.02.16">2019.02.16</a></h3>
<p>View <code>include/leveldb/cache.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Cache<span class="token punctuation">;</span>

<span class="token comment">// Create a new cache with a fixed size capacity.  This implementation</span>
<span class="token comment">// of Cache uses a least-recently-used eviction policy.</span>
LEVELDB_EXPORT Cache<span class="token operator">*</span> <span class="token function">NewLRUCache</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Cache <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">Cache</span><span class="token punctuation">(</span><span class="token keyword">const</span> Cache<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Cache<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Cache<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token comment">// Destroys all existing entries by calling the "deleter"</span>
  <span class="token comment">// function that was passed to the constructor.</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Opaque handle to an entry stored in the cache.</span>
  <span class="token keyword">struct</span> <span class="token class-name">Handle</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Insert a mapping from key->value into the cache and assign it</span>
  <span class="token comment">// the specified charge against the total cache capacity.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Returns a handle that corresponds to the mapping.  The caller</span>
  <span class="token comment">// must call this->Release(handle) when the returned mapping is no</span>
  <span class="token comment">// longer needed.</span>
  <span class="token comment">//</span>
  <span class="token comment">// When the inserted entry is no longer needed, the key and</span>
  <span class="token comment">// value will be passed to "deleter".</span>
  <span class="token keyword">virtual</span> Handle<span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">,</span> size_t charge<span class="token punctuation">,</span>
                         <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// If the cache has no mapping for "key", returns nullptr.</span>
  <span class="token comment">//</span>
  <span class="token comment">// Else return a handle that corresponds to the mapping.  The caller</span>
  <span class="token comment">// must call this->Release(handle) when the returned mapping is no</span>
  <span class="token comment">// longer needed.</span>
  <span class="token keyword">virtual</span> Handle<span class="token operator">*</span> <span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Release a mapping returned by a previous Lookup().</span>
  <span class="token comment">// REQUIRES: handle must not have been released yet.</span>
  <span class="token comment">// REQUIRES: handle must have been returned by a method on *this.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span>Handle<span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the value encapsulated in a handle returned by a</span>
  <span class="token comment">// successful Lookup().</span>
  <span class="token comment">// REQUIRES: handle must not have been released yet.</span>
  <span class="token comment">// REQUIRES: handle must have been returned by a method on *this.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Value</span><span class="token punctuation">(</span>Handle<span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// If the cache contains entry for key, erase it.  Note that the</span>
  <span class="token comment">// underlying entry will be kept around until all existing handles</span>
  <span class="token comment">// to it have been released.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a new numeric id.  May be used by multiple clients who are</span>
  <span class="token comment">// sharing the same cache to partition the key space.  Typically the</span>
  <span class="token comment">// client will allocate a new id at startup and prepend the id to</span>
  <span class="token comment">// its cache keys.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">NewId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Remove all cache entries that are not actively in use.  Memory-constrained</span>
  <span class="token comment">// applications may wish to call this method to reduce memory usage.</span>
  <span class="token comment">// Default implementation of Prune() does nothing.  Subclasses are strongly</span>
  <span class="token comment">// encouraged to override the default implementation.  A future release of</span>
  <span class="token comment">// leveldb may change Prune() to a pure abstract method.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// Return an estimate of the combined charges of all elements stored in the</span>
  <span class="token comment">// cache.</span>
  <span class="token keyword">virtual</span> size_t <span class="token function">TotalCharge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">LRU_Remove</span><span class="token punctuation">(</span>Handle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">LRU_Append</span><span class="token punctuation">(</span>Handle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Unref</span><span class="token punctuation">(</span>Handle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">Rep</span><span class="token punctuation">;</span>
  Rep<span class="token operator">*</span> rep_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p><code>Cache* NewLRUCache(size_t capacity)</code> is implemented in <code>util/cache.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// An entry is a variable length heap-allocated structure.  Entries</span>
<span class="token comment">// are kept in a circular doubly linked list ordered by access time.</span>
<span class="token keyword">struct</span> <span class="token class-name">LRUHandle</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  LRUHandle<span class="token operator">*</span> next_hash<span class="token punctuation">;</span>
  LRUHandle<span class="token operator">*</span> next<span class="token punctuation">;</span>
  LRUHandle<span class="token operator">*</span> prev<span class="token punctuation">;</span>
  size_t charge<span class="token punctuation">;</span>      <span class="token comment">// TODO(opt): Only allow uint32_t?</span>
  size_t key_length<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> in_cache<span class="token punctuation">;</span>      <span class="token comment">// Whether entry is in the cache.</span>
  <span class="token keyword">uint32_t</span> refs<span class="token punctuation">;</span>      <span class="token comment">// References, including cache reference, if present.</span>
  <span class="token keyword">uint32_t</span> hash<span class="token punctuation">;</span>      <span class="token comment">// Hash of key(); used for fast sharding and comparisons</span>
  <span class="token keyword">char</span> key_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// Beginning of key</span>

  Slice <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token comment">// next_ is only equal to this if the LRU handle is the list head of an</span>
    <span class="token comment">// empty list. List heads never have meaningful keys.</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>key_data<span class="token punctuation">,</span> key_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>
<span class="token comment">// Line 269</span>
Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">,</span> size_t charge<span class="token punctuation">,</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  LRUHandle<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>LRUHandle<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
      <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LRUHandle<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  e<span class="token operator">-></span>deleter <span class="token operator">=</span> deleter<span class="token punctuation">;</span>
  e<span class="token operator">-></span>charge <span class="token operator">=</span> charge<span class="token punctuation">;</span>
  e<span class="token operator">-></span>key_length <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
  e<span class="token operator">-></span>in_cache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>refs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// for the returned handle.</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>key_data<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The <code>key_data</code> is used as a pointer, not as a fixed array. It's the last member of <code>LRUHandle</code> and the size of <code>LRUHandle</code> is variable.</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// We provide our own simple hash table since it removes a whole bunch</span>
<span class="token comment">// of porting hacks and is also faster than some of the built-in hash</span>
<span class="token comment">// table implementations in some of the compiler/runtime combinations</span>
<span class="token comment">// we have tested.  E.g., readrandom speeds up by ~5% over the g++</span>
<span class="token comment">// 4.4.3's builtin hashtable.</span>
<span class="token keyword">class</span> <span class="token class-name">HandleTable</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">HandleTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">length_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">elems_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">list_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">HandleTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  LRUHandle<span class="token operator">*</span> <span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">FindPointer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  LRUHandle<span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">FindPointer</span><span class="token punctuation">(</span>h<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token operator">-></span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LRUHandle<span class="token operator">*</span> old <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    h<span class="token operator">-></span>next_hash <span class="token operator">=</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> <span class="token keyword">nullptr</span> <span class="token operator">:</span> old<span class="token operator">-></span>next_hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>ptr <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>elems_<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>elems_ <span class="token operator">></span> length_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Since each cache entry is fairly large, we aim for a small</span>
        <span class="token comment">// average linked list length (&lt;= 1).</span>
        <span class="token function">Resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> old<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  LRUHandle<span class="token operator">*</span> <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">FindPointer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LRUHandle<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>ptr <span class="token operator">=</span> result<span class="token operator">-></span>next_hash<span class="token punctuation">;</span>
      <span class="token operator">--</span>elems_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// The table consists of an array of buckets where each bucket is</span>
  <span class="token comment">// a linked list of cache entries that hash into the bucket.</span>
  <span class="token keyword">uint32_t</span> length_<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> elems_<span class="token punctuation">;</span>
  LRUHandle<span class="token operator">*</span><span class="token operator">*</span> list_<span class="token punctuation">;</span>

  <span class="token comment">// Return a pointer to slot that points to a cache entry that</span>
  <span class="token comment">// matches key/hash.  If there is no such cache entry, return a</span>
  <span class="token comment">// pointer to the trailing slot in the corresponding linked list.</span>
  LRUHandle<span class="token operator">*</span><span class="token operator">*</span> <span class="token function">FindPointer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>list_<span class="token punctuation">[</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span>
           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token operator">-></span>hash <span class="token operator">!=</span> hash <span class="token operator">||</span> key <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ptr <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token operator">-></span>next_hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> new_length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>new_length <span class="token operator">&lt;</span> elems_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      new_length <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    LRUHandle<span class="token operator">*</span><span class="token operator">*</span> new_list <span class="token operator">=</span> <span class="token keyword">new</span> LRUHandle<span class="token operator">*</span><span class="token punctuation">[</span>new_length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>new_list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>new_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> new_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length_<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      LRUHandle<span class="token operator">*</span> h <span class="token operator">=</span> list_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LRUHandle<span class="token operator">*</span> next <span class="token operator">=</span> h<span class="token operator">-></span>next_hash<span class="token punctuation">;</span>
        <span class="token keyword">uint32_t</span> hash <span class="token operator">=</span> h<span class="token operator">-></span>hash<span class="token punctuation">;</span>
        LRUHandle<span class="token operator">*</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>new_list<span class="token punctuation">[</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>new_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        h<span class="token operator">-></span>next_hash <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
        <span class="token operator">*</span>ptr <span class="token operator">=</span> h<span class="token punctuation">;</span>
        h <span class="token operator">=</span> next<span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>elems_ <span class="token operator">==</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list_<span class="token punctuation">;</span>
    list_ <span class="token operator">=</span> new_list<span class="token punctuation">;</span>
    length_ <span class="token operator">=</span> new_length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>A closed hash table implementation.</p>
<h3 id="2019.02.17" tabindex="-1"><a href="#2019.02.17">2019.02.17</a></h3>
<p>Continue with <code>util/cache.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// A single shard of sharded cache.</span>
<span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Separate from constructor so caller can easily make an array of LRUCache</span>
  <span class="token keyword">void</span> <span class="token function">SetCapacity</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span> capacity_ <span class="token operator">=</span> capacity<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Like Cache methods, but with an extra "hash" parameter.</span>
  Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">,</span>
                        <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">,</span> size_t charge<span class="token punctuation">,</span>
                        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> <span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span>Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t <span class="token function">TotalCharge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> usage_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">void</span> <span class="token function">LRU_Remove</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">LRU_Append</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span>list<span class="token punctuation">,</span> LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Ref</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Unref</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> <span class="token function">FinishErase</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token function">EXCLUSIVE_LOCKS_REQUIRED</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialized before use.</span>
  size_t capacity_<span class="token punctuation">;</span>

  <span class="token comment">// mutex_ protects the following state.</span>
  <span class="token keyword">mutable</span> port<span class="token double-colon punctuation">::</span>Mutex mutex_<span class="token punctuation">;</span>
  size_t usage_ <span class="token function">GUARDED_BY</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Dummy head of LRU list.</span>
  <span class="token comment">// lru.prev is newest entry, lru.next is oldest entry.</span>
  <span class="token comment">// Entries have refs==1 and in_cache==true.</span>
  LRUHandle lru_ <span class="token function">GUARDED_BY</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Dummy head of in-use list.</span>
  <span class="token comment">// Entries are in use by clients, and have refs >= 2 and in_cache==true.</span>
  LRUHandle in_use_ <span class="token function">GUARDED_BY</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  HandleTable table_ <span class="token function">GUARDED_BY</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">usage_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make empty circular linked lists.</span>
  lru_<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>lru_<span class="token punctuation">;</span>
  lru_<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>lru_<span class="token punctuation">;</span>
  in_use_<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>in_use_<span class="token punctuation">;</span>
  in_use_<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>in_use_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>in_use_<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token operator">&amp;</span>in_use_<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error if caller has an unreleased handle</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e <span class="token operator">=</span> lru_<span class="token punctuation">.</span>next<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token operator">&amp;</span>lru_<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span> next <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-></span>in_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token operator">-></span>in_cache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Invariant of lru_ list.</span>
    <span class="token function">Unref</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Ref</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e<span class="token operator">-></span>in_cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// If on lru_ list, move to in_use_ list.</span>
    <span class="token function">LRU_Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LRU_Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in_use_<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  e<span class="token operator">-></span>refs<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Unref</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-></span>refs <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>refs<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Deallocate.</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token operator">-></span>in_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token operator">-></span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-></span>in_cache <span class="token operator">&amp;&amp;</span> e<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// No longer in use; move to lru_ list.</span>
    <span class="token function">LRU_Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LRU_Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lru_<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">LRU_Remove</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> e<span class="token operator">-></span>prev<span class="token punctuation">;</span>
  e<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">LRU_Append</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> list<span class="token punctuation">,</span> LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make "e" newest entry by inserting just before *list</span>
  e<span class="token operator">-></span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>
  e<span class="token operator">-></span>prev <span class="token operator">=</span> list<span class="token operator">-></span>prev<span class="token punctuation">;</span>
  e<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
  e<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  LRUHandle<span class="token operator">*</span> e <span class="token operator">=</span> table_<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Ref</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Release</span><span class="token punctuation">(</span>Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Unref</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>LRUHandle<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">,</span> size_t charge<span class="token punctuation">,</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>deleter<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>

  LRUHandle<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>LRUHandle<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
      <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LRUHandle<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  e<span class="token operator">-></span>deleter <span class="token operator">=</span> deleter<span class="token punctuation">;</span>
  e<span class="token operator">-></span>charge <span class="token operator">=</span> charge<span class="token punctuation">;</span>
  e<span class="token operator">-></span>key_length <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>
  e<span class="token operator">-></span>in_cache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>refs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// for the returned handle.</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>key_data<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity_ <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token operator">-></span>refs<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// for the cache's reference.</span>
    e<span class="token operator">-></span>in_cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">LRU_Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in_use_<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    usage_ <span class="token operator">+=</span> charge<span class="token punctuation">;</span>
    <span class="token function">FinishErase</span><span class="token punctuation">(</span>table_<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// don't cache. (capacity_==0 is supported and turns off caching.)</span>
    <span class="token comment">// next is read by key() in an assert, so it must be initialized</span>
    e<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>usage_ <span class="token operator">></span> capacity_ <span class="token operator">&amp;&amp;</span> lru_<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token operator">&amp;</span>lru_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span> old <span class="token operator">=</span> lru_<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>old<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> erased <span class="token operator">=</span> <span class="token function">FinishErase</span><span class="token punctuation">(</span>table_<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>old<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> old<span class="token operator">-></span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>erased<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// to avoid unused variable when compiled NDEBUG</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>erased<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Cache<span class="token double-colon punctuation">::</span>Handle<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// If e != nullptr, finish removing *e from the cache; it has already been</span>
<span class="token comment">// removed from the hash table.  Return whether e != nullptr.</span>
<span class="token keyword">bool</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">FinishErase</span><span class="token punctuation">(</span>LRUHandle<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-></span>in_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LRU_Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token operator">-></span>in_cache <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    usage_ <span class="token operator">-=</span> e<span class="token operator">-></span>charge<span class="token punctuation">;</span>
    <span class="token function">Unref</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> e <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Erase</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FinishErase</span><span class="token punctuation">(</span>table_<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">LRUCache</span><span class="token double-colon punctuation">::</span><span class="token function">Prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  MutexLock <span class="token function">l</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>lru_<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token operator">&amp;</span>lru_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LRUHandle<span class="token operator">*</span> e <span class="token operator">=</span> lru_<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-></span>refs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> erased <span class="token operator">=</span> <span class="token function">FinishErase</span><span class="token punctuation">(</span>table_<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>e<span class="token operator">-></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token operator">-></span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>erased<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// to avoid unused variable when compiled NDEBUG</span>
      <span class="token function">assert</span><span class="token punctuation">(</span>erased<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>LRUCache</code> means <code>Least Recently Used</code>. Here it is implemented by a circular doubly linked list.</p>
<h3 id="2019.02.20" tabindex="-1"><a href="#2019.02.20">2019.02.20</a></h3>
<p>View <code>util/no_destructor.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Wraps an instance whose destructor is never called.</span>
<span class="token comment">//</span>
<span class="token comment">// This is intended for use with function-level static variables.</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">InstanceType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">NoDestructor</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ConstructorArgTypes<span class="token operator">></span>
  <span class="token keyword">explicit</span> <span class="token function">NoDestructor</span><span class="token punctuation">(</span>ConstructorArgTypes<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> constructor_args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>instance_storage_<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>InstanceType<span class="token punctuation">)</span><span class="token punctuation">,</span>
                  <span class="token string">"instance_storage_ is not large enough to hold the instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static_assert</span><span class="token punctuation">(</span>
        <span class="token keyword">alignof</span><span class="token punctuation">(</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>instance_storage_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>InstanceType<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">"instance_storage_ does not meet the instance's alignment requirement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>instance_storage_<span class="token punctuation">)</span> <span class="token function">InstanceType</span><span class="token punctuation">(</span>
        std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>ConstructorArgTypes<span class="token operator">></span></span></span><span class="token punctuation">(</span>constructor_args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token operator">~</span><span class="token function">NoDestructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">NoDestructor</span><span class="token punctuation">(</span><span class="token keyword">const</span> NoDestructor<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  NoDestructor<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> NoDestructor<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  InstanceType<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>InstanceType<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instance_storage_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">typename</span>
      <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>aligned_storage<span class="token operator">&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>InstanceType<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">alignof</span><span class="token punctuation">(</span>InstanceType<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>type
      instance_storage_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>View <code>util/no_destructor_test.cc</code> meanwhile:</p>
<pre class="language-cpp"><code class="language-cpp">
<span class="token keyword">struct</span> <span class="token class-name">DoNotDestruct</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">DoNotDestruct</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> a<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">DoNotDestruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Used to check constructor argument forwarding.</span>
  <span class="token keyword">uint32_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> kGoldenA <span class="token operator">=</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> kGoldenB <span class="token operator">=</span> <span class="token number">0xaabbccddeeffaabb</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace</span>

<span class="token keyword">class</span> <span class="token class-name">NoDestructorTest</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">TEST</span><span class="token punctuation">(</span>NoDestructorTest<span class="token punctuation">,</span> StackInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  NoDestructor<span class="token operator">&lt;</span>DoNotDestruct<span class="token operator">></span> <span class="token function">instance</span><span class="token punctuation">(</span>kGoldenA<span class="token punctuation">,</span> kGoldenB<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span>kGoldenA<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span>kGoldenB<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">TEST</span><span class="token punctuation">(</span>NoDestructorTest<span class="token punctuation">,</span> StaticInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> NoDestructor<span class="token operator">&lt;</span>DoNotDestruct<span class="token operator">></span> <span class="token function">instance</span><span class="token punctuation">(</span>kGoldenA<span class="token punctuation">,</span> kGoldenB<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span>kGoldenA<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span>kGoldenB<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>~DoNotDestruct() { std::abort(); }</code> will not be executed in runtime. The application of <code>NoDestructor</code> could be found in <code>util/comparator.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// ...</span>
<span class="token comment">// Line 71</span>
<span class="token keyword">const</span> Comparator<span class="token operator">*</span> <span class="token function">BytewiseComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> NoDestructor<span class="token operator">&lt;</span>BytewiseComparatorImpl<span class="token operator">></span> singleton<span class="token punctuation">;</span>
  <span class="token keyword">return</span> singleton<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>NoDestructor</code> is used in <code>singleton</code> design pattern.</p>
<h3 id="2019.02.22" tabindex="-1"><a href="#2019.02.22">2019.02.22</a></h3>
<p>View <code>util/random.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// A very simple random number generator.  Not especially good at</span>
<span class="token comment">// generating truly random bits, but good enough for our needs in this</span>
<span class="token comment">// package.</span>
<span class="token keyword">class</span> <span class="token class-name">Random</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">uint32_t</span> seed_<span class="token punctuation">;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">seed_</span><span class="token punctuation">(</span>s <span class="token operator">&amp;</span> <span class="token number">0x7fffffffu</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Avoid bad seeds.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seed_ <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> seed_ <span class="token operator">==</span> <span class="token number">2147483647L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      seed_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// SF: 1 &lt;= seed_ &lt; 2147483647</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">uint32_t</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> M <span class="token operator">=</span> <span class="token number">2147483647L</span><span class="token punctuation">;</span>   <span class="token comment">// 2^31-1</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> A <span class="token operator">=</span> <span class="token number">16807</span><span class="token punctuation">;</span>  <span class="token comment">// bits 14, 8, 7, 5, 2, 1, 0</span>
    <span class="token comment">// SF: A = pow(7, 5), not a prime number</span>

    <span class="token comment">// We are computing</span>
    <span class="token comment">//       seed_ = (seed_ * A) % M,    where M = 2^31-1</span>
    <span class="token comment">//</span>
    <span class="token comment">// seed_ must not be zero or M, or else all subsequent computed values</span>
    <span class="token comment">// will be zero or M respectively.  For all other values, seed_ will end</span>
    <span class="token comment">// up cycling through every number in [1,M-1]</span>
    <span class="token keyword">uint64_t</span> product <span class="token operator">=</span> seed_ <span class="token operator">*</span> A<span class="token punctuation">;</span>

    <span class="token comment">// Compute (product % M) using the fact that ((x &lt;&lt; 31) % M) == x.</span>
    seed_ <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint32_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>product <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>product <span class="token operator">&amp;</span> M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The first reduction may overflow by 1 bit, so we may need to</span>
    <span class="token comment">// repeat.  mod == M is not possible; using > allows the faster</span>
    <span class="token comment">// sign-bit-based test.</span>
    <span class="token comment">// SF: orz...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seed_ <span class="token operator">></span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      seed_ <span class="token operator">-=</span> M<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> seed_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Returns a uniformly distributed value in the range [0..n-1]</span>
  <span class="token comment">// REQUIRES: n > 0</span>
  <span class="token keyword">uint32_t</span> <span class="token function">Uniform</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Randomly returns true ~"1/n" of the time, and false otherwise.</span>
  <span class="token comment">// REQUIRES: n > 0</span>
  <span class="token keyword">bool</span> <span class="token function">OneIn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Skewed: pick "base" uniformly from range [0,max_log] and then</span>
  <span class="token comment">// return "base" random bits.  The effect is to pick a number in the</span>
  <span class="token comment">// range [0,2^max_log-1] with exponential bias towards smaller numbers.</span>
  <span class="token keyword">uint32_t</span> <span class="token function">Skewed</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Uniform</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">Uniform</span><span class="token punctuation">(</span>max_log <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>View <code>arena.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port.h"</span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">Arena</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Arena</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">~</span><span class="token function">Arena</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a pointer to a newly allocated memory block of "bytes" bytes.</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">Allocate</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Allocate memory with the normal alignment guarantees provided by malloc</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">AllocateAligned</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Returns an estimate of the total memory usage of data allocated</span>
  <span class="token comment">// by the arena.</span>
  size_t <span class="token function">MemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uintptr_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>memory_usage_<span class="token punctuation">.</span><span class="token function">NoBarrier_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">AllocateFallback</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">AllocateNewBlock</span><span class="token punctuation">(</span>size_t block_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Allocation state</span>
  <span class="token keyword">char</span><span class="token operator">*</span> alloc_ptr_<span class="token punctuation">;</span>
  size_t alloc_bytes_remaining_<span class="token punctuation">;</span>

  <span class="token comment">// Array of new[] allocated memory blocks</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> blocks_<span class="token punctuation">;</span>

  <span class="token comment">// Total memory usage of the arena.</span>
  port<span class="token double-colon punctuation">::</span>AtomicPointer memory_usage_<span class="token punctuation">;</span>

  <span class="token comment">// No copying allowed</span>
  <span class="token function">Arena</span><span class="token punctuation">(</span><span class="token keyword">const</span> Arena<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Arena<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">inline</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token function">Allocate</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// The semantics of what to return are a bit messy if we allow</span>
  <span class="token comment">// 0-byte allocations, so we disallow them here (we don't need</span>
  <span class="token comment">// them for our internal use).</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>bytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">&lt;=</span> alloc_bytes_remaining_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> alloc_ptr_<span class="token punctuation">;</span>
    alloc_ptr_ <span class="token operator">+=</span> bytes<span class="token punctuation">;</span>
    alloc_bytes_remaining_ <span class="token operator">-=</span> bytes<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">AllocateFallback</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p>Implementation <code>util/arena.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/arena.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kBlockSize <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>

<span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token function">Arena</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">memory_usage_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  alloc_ptr_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">// First allocation will allocate a block</span>
  alloc_bytes_remaining_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Arena</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blocks_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blocks_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateFallback</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">></span> kBlockSize <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Object is more than a quarter of our block size.  Allocate it separately</span>
    <span class="token comment">// to avoid wasting too much space in leftover bytes.</span>
    <span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">AllocateNewBlock</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// We waste the remaining space in the current block.</span>
  alloc_ptr_ <span class="token operator">=</span> <span class="token function">AllocateNewBlock</span><span class="token punctuation">(</span>kBlockSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  alloc_bytes_remaining_ <span class="token operator">=</span> kBlockSize<span class="token punctuation">;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> alloc_ptr_<span class="token punctuation">;</span>
  alloc_ptr_ <span class="token operator">+=</span> bytes<span class="token punctuation">;</span>
  alloc_bytes_remaining_ <span class="token operator">-=</span> bytes<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateAligned</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> align <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>align <span class="token operator">&amp;</span> <span class="token punctuation">(</span>align<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Pointer size should be a power of 2</span>
  size_t current_mod <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uintptr_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>alloc_ptr_<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>align<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t slop <span class="token operator">=</span> <span class="token punctuation">(</span>current_mod <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> align <span class="token operator">-</span> current_mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t needed <span class="token operator">=</span> bytes <span class="token operator">+</span> slop<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>needed <span class="token operator">&lt;=</span> alloc_bytes_remaining_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> alloc_ptr_ <span class="token operator">+</span> slop<span class="token punctuation">;</span>
    alloc_ptr_ <span class="token operator">+=</span> needed<span class="token punctuation">;</span>
    alloc_bytes_remaining_ <span class="token operator">-=</span> needed<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// AllocateFallback always returned aligned memory</span>
    result <span class="token operator">=</span> <span class="token function">AllocateFallback</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uintptr_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>align<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token class-name">Arena</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateNewBlock</span><span class="token punctuation">(</span>size_t block_bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>block_bytes<span class="token punctuation">]</span><span class="token punctuation">;</span>
  blocks_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  memory_usage_<span class="token punctuation">.</span><span class="token function">NoBarrier_Store</span><span class="token punctuation">(</span>
      <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">MemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> block_bytes <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p><code>Arena</code> is a memory pool. It can manage the allocation of small memory  usage and do auto-release in destructor.</p>
<h3 id="2019.02.23" tabindex="-1"><a href="#2019.02.23">2019.02.23</a></h3>
<p>View <code>db/skiplist.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// Thread safety</span>
<span class="token comment">// -------------</span>
<span class="token comment">//</span>
<span class="token comment">// Writes require external synchronization, most likely a mutex.</span>
<span class="token comment">// Reads require a guarantee that the SkipList will not be destroyed</span>
<span class="token comment">// while the read is in progress.  Apart from that, reads progress</span>
<span class="token comment">// without any internal locking or synchronization.</span>
<span class="token comment">//</span>
<span class="token comment">// Invariants:</span>
<span class="token comment">//</span>
<span class="token comment">// (1) Allocated nodes are never deleted until the SkipList is</span>
<span class="token comment">// destroyed.  This is trivially guaranteed by the code since we</span>
<span class="token comment">// never delete any skip list nodes.</span>
<span class="token comment">//</span>
<span class="token comment">// (2) The contents of a Node except for the next/prev pointers are</span>
<span class="token comment">// immutable after the Node has been linked into the SkipList.</span>
<span class="token comment">// Only Insert() modifies the list, and it is careful to initialize</span>
<span class="token comment">// a node and use release-stores to publish the nodes in one or</span>
<span class="token comment">// more lists.</span>
<span class="token comment">//</span>
<span class="token comment">// ... prev vs. next pointer ordering ...</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"port/port.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/arena.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/random.h"</span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">Arena</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">SkipList</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Create a new SkipList object that will use "cmp" for comparing keys,</span>
  <span class="token comment">// and will allocate memory using "*arena".  Objects allocated in the arena</span>
  <span class="token comment">// must remain allocated for the lifetime of the skiplist object.</span>
  <span class="token keyword">explicit</span> <span class="token function">SkipList</span><span class="token punctuation">(</span>Comparator cmp<span class="token punctuation">,</span> Arena<span class="token operator">*</span> arena<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Insert key into the list.</span>
  <span class="token comment">// REQUIRES: nothing that compares equal to key is currently in the list.</span>
  <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Returns true iff an entry that compares equal to key is in the list.</span>
  <span class="token keyword">bool</span> <span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// Iteration over the contents of a skip list</span>
  <span class="token keyword">class</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// Initialize an iterator over the specified list.</span>
    <span class="token comment">// The returned iterator is not valid.</span>
    <span class="token keyword">explicit</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> SkipList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns true iff the iterator is positioned at a valid node.</span>
    <span class="token keyword">bool</span> <span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token comment">// Returns the key at the current position.</span>
    <span class="token comment">// REQUIRES: Valid()</span>
    <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

    <span class="token comment">// Advances to the next position.</span>
    <span class="token comment">// REQUIRES: Valid()</span>
    <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Advances to the previous position.</span>
    <span class="token comment">// REQUIRES: Valid()</span>
    <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Advance to the first entry with a key >= target</span>
    <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Position at the first entry in list.</span>
    <span class="token comment">// Final state of iterator is Valid() iff list is not empty.</span>
    <span class="token keyword">void</span> <span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Position at the last entry in list.</span>
    <span class="token comment">// Final state of iterator is Valid() iff list is not empty.</span>
    <span class="token keyword">void</span> <span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">const</span> SkipList<span class="token operator">*</span> list_<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> node_<span class="token punctuation">;</span>
    <span class="token comment">// Intentionally copyable</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">enum</span> <span class="token punctuation">{</span> kMaxHeight <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Immutable after construction</span>
  Comparator <span class="token keyword">const</span> compare_<span class="token punctuation">;</span>
  Arena<span class="token operator">*</span> <span class="token keyword">const</span> arena_<span class="token punctuation">;</span>    <span class="token comment">// Arena used for allocations of nodes</span>

  Node<span class="token operator">*</span> <span class="token keyword">const</span> head_<span class="token punctuation">;</span>

  <span class="token comment">// Modified only by Insert().  Read racily by readers, but stale</span>
  <span class="token comment">// values are ok.</span>
  port<span class="token double-colon punctuation">::</span>AtomicPointer max_height_<span class="token punctuation">;</span>   <span class="token comment">// Height of the entire list</span>

  <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
        <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>intptr_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>max_height_<span class="token punctuation">.</span><span class="token function">NoBarrier_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Read/written only by Insert().</span>
  Random rnd_<span class="token punctuation">;</span>

  Node<span class="token operator">*</span> <span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token function">RandomHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> <span class="token function">Equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">compare_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Return true if key is greater than the data stored in "n"</span>
  <span class="token keyword">bool</span> <span class="token function">KeyIsAfterNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the earliest node that comes at or after key.</span>
  <span class="token comment">// Return nullptr if there is no such node.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If prev is non-null, fills prev[level] with pointer to previous</span>
  <span class="token comment">// node at "level" for every level in [0..max_height_-1].</span>
  Node<span class="token operator">*</span> <span class="token function">FindGreaterOrEqual</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">*</span> prev<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the latest node with a key &lt; key.</span>
  <span class="token comment">// Return head_ if there is no such node.</span>
  Node<span class="token operator">*</span> <span class="token function">FindLessThan</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the last node in the list.</span>
  <span class="token comment">// Return head_ if list is empty.</span>
  Node<span class="token operator">*</span> <span class="token function">FindLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token comment">// No copying allowed</span>
  <span class="token function">SkipList</span><span class="token punctuation">(</span><span class="token keyword">const</span> SkipList<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> SkipList<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Implementation details follow</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span>Node <span class="token punctuation">{</span>
  <span class="token keyword">explicit</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> k<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

  Key <span class="token keyword">const</span> key<span class="token punctuation">;</span>

  <span class="token comment">// Accessors/mutators for links.  Wrapped in methods so we can</span>
  <span class="token comment">// add the appropriate barriers as necessary.</span>
  Node<span class="token operator">*</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Use an 'acquire load' so that we observe a fully initialized</span>
    <span class="token comment">// version of the returned Node.</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>next_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Acquire_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Node<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Use a 'release store' so that anybody who reads through this</span>
    <span class="token comment">// pointer observes a fully initialized version of the inserted node.</span>
    next_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Release_Store</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// No-barrier variants that can be safely used in a few locations.</span>
  Node<span class="token operator">*</span> <span class="token function">NoBarrier_Next</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>next_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">NoBarrier_Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">NoBarrier_SetNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Node<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    next_<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">NoBarrier_Store</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// Array of length equal to the node height.  next_[0] is lowest level link.</span>
  port<span class="token double-colon punctuation">::</span>AtomicPointer next_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// SF: variable length array, at least 1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span>Node<span class="token operator">*</span>
<span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> mem <span class="token operator">=</span> arena_<span class="token operator">-></span><span class="token function">AllocateAligned</span><span class="token punctuation">(</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>port<span class="token double-colon punctuation">::</span>AtomicPointer<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// SF: dynamic object size</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>mem<span class="token punctuation">)</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> SkipList<span class="token operator">*</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  list_ <span class="token operator">=</span> list<span class="token punctuation">;</span>
  node_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">bool</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> node_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> node_<span class="token operator">-></span>key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node_ <span class="token operator">=</span> node_<span class="token operator">-></span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Instead of using explicit "prev" links, we just search for the</span>
  <span class="token comment">// last node that falls before key.</span>
  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node_ <span class="token operator">=</span> list_<span class="token operator">-></span><span class="token function">FindLessThan</span><span class="token punctuation">(</span>node_<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node_ <span class="token operator">==</span> list_<span class="token operator">-></span>head_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node_ <span class="token operator">=</span> list_<span class="token operator">-></span><span class="token function">FindGreaterOrEqual</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node_ <span class="token operator">=</span> list_<span class="token operator">-></span>head_<span class="token operator">-></span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> SkipList<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token class-name">Iterator</span><span class="token double-colon punctuation">::</span><span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node_ <span class="token operator">=</span> list_<span class="token operator">-></span><span class="token function">FindLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node_ <span class="token operator">==</span> list_<span class="token operator">-></span>head_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">int</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">RandomHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Increase height with probability 1 in kBranching</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> kBranching <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> kMaxHeight <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rnd_<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> kBranching<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    height<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">// SF: exponentially decaying probability</span>
  <span class="token punctuation">}</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>height <span class="token operator">&lt;=</span> kMaxHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">KeyIsAfterNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// null n is considered infinite</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">compare_</span><span class="token punctuation">(</span>n<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span>Node<span class="token operator">*</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">FindGreaterOrEqual</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">*</span> prev<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> x <span class="token operator">=</span> head_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> next <span class="token operator">=</span> x<span class="token operator">-></span><span class="token function">Next</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">KeyIsAfterNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Keep searching in this list</span>
      x <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> prev<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
      <span class="token comment">// SF: it's OK because of continuous update</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Switch to next list</span>
        level<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span>Node<span class="token operator">*</span>
<span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">FindLessThan</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> x <span class="token operator">=</span> head_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>x <span class="token operator">==</span> head_ <span class="token operator">||</span> <span class="token function">compare_</span><span class="token punctuation">(</span>x<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Node<span class="token operator">*</span> next <span class="token operator">=</span> x<span class="token operator">-></span><span class="token function">Next</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> <span class="token function">compare_</span><span class="token punctuation">(</span>next<span class="token operator">-></span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Switch to next list</span>
        level<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      x <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">typename</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span>Node<span class="token operator">*</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">FindLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> x <span class="token operator">=</span> head_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> next <span class="token operator">=</span> x<span class="token operator">-></span><span class="token function">Next</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Switch to next list</span>
        level<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      x <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">SkipList</span><span class="token punctuation">(</span>Comparator cmp<span class="token punctuation">,</span> Arena<span class="token operator">*</span> arena<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">compare_</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">arena_</span><span class="token punctuation">(</span>arena<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">head_</span><span class="token punctuation">(</span><span class="token function">NewNode</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment">/* any key will do */</span><span class="token punctuation">,</span> kMaxHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">max_height_</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">rnd_</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kMaxHeight<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head_<span class="token operator">-></span><span class="token function">SetNext</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO(opt): We can use a barrier-free variant of FindGreaterOrEqual()</span>
  <span class="token comment">// here since Insert() is externally synchronized.</span>
  Node<span class="token operator">*</span> prev<span class="token punctuation">[</span>kMaxHeight<span class="token punctuation">]</span><span class="token punctuation">;</span>
  Node<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">FindGreaterOrEqual</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Our data structure does not allow duplicate insertion</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">Equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">RandomHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">></span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">GetMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      prev<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//fprintf(stderr, "Change height from %d to %d\n", max_height_, height);</span>

    <span class="token comment">// It is ok to mutate max_height_ without any synchronization</span>
    <span class="token comment">// with concurrent readers.  A concurrent reader that observes</span>
    <span class="token comment">// the new value of max_height_ will see either the old value of</span>
    <span class="token comment">// new level pointers from head_ (nullptr), or a new value set in</span>
    <span class="token comment">// the loop below.  In the former case the reader will</span>
    <span class="token comment">// immediately drop to the next level since nullptr sorts after all</span>
    <span class="token comment">// keys.  In the latter case the reader will use the new node.</span>
    max_height_<span class="token punctuation">.</span><span class="token function">NoBarrier_Store</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  x <span class="token operator">=</span> <span class="token function">NewNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// NoBarrier_SetNext() suffices since we will add a barrier when</span>
    <span class="token comment">// we publish a pointer to "x" in prev[i].</span>
    x<span class="token operator">-></span><span class="token function">NoBarrier_SetNext</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> prev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">NoBarrier_Next</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    prev<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">SetNext</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// SF: x->next[i] = prev[i]->next[i]</span>
    <span class="token comment">// SF: prev[i]->next[i] = x</span>
    <span class="token comment">// SF: i is level, not a i-th next</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span><span class="token operator">></span>
<span class="token keyword">bool</span> <span class="token class-name">SkipList</span><span class="token operator">&lt;</span>Key<span class="token punctuation">,</span>Comparator<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">FindGreaterOrEqual</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p>A exquisite implementation of <code>SkipList</code>, a list with <code>next(level)</code> operator. The <a href="/algorithm/hierarchical_navigable_small_world.htm">Hierarchical NSW</a> algorithm uses the same idea.</p>
<figure tabindex="1"><a href="../images/06ed90a2ff127bd125ca29346b2ee7e5.svg"><img src="../images/06ed90a2ff127bd125ca29346b2ee7e5.svg" alt=""></a><figcaption>SkipList</figcaption></figure>
<h3 id="2019.02.24" tabindex="-1"><a href="#2019.02.24">2019.02.24</a></h3>
<p>View <code>include/leveldb/env.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// An Env is an interface used by the leveldb implementation to access</span>
<span class="token comment">// operating system functionality like the filesystem etc.  Callers</span>
<span class="token comment">// may wish to provide a custom Env object when opening a database to</span>
<span class="token comment">// get fine gain control; e.g., to rate limit file system operations.</span>
<span class="token comment">//</span>
<span class="token comment">// All Env implementations are safe for concurrent access from</span>
<span class="token comment">// multiple threads without any external synchronization.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/export.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/status.h"</span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">FileLock</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Logger</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SequentialFile</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Slice</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">WritableFile</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Env <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">Env</span><span class="token punctuation">(</span><span class="token keyword">const</span> Env<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Env<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Env<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return a default environment suitable for the current operating</span>
  <span class="token comment">// system.  Sophisticated users may wish to provide their own Env</span>
  <span class="token comment">// implementation instead of relying on this default environment.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The result of Default() belongs to leveldb and must never be deleted.</span>
  <span class="token keyword">static</span> Env<span class="token operator">*</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create an object that sequentially reads the file with the specified name.</span>
  <span class="token comment">// On success, stores a pointer to the new file in *result and returns OK.</span>
  <span class="token comment">// On failure stores nullptr in *result and returns non-OK.  If the file does</span>
  <span class="token comment">// not exist, returns a non-OK status.  Implementations should return a</span>
  <span class="token comment">// NotFound status when the file does not exist.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The returned file will only be accessed by one thread at a time.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">NewSequentialFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                   SequentialFile<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Create an object supporting random-access reads from the file with the</span>
  <span class="token comment">// specified name.  On success, stores a pointer to the new file in</span>
  <span class="token comment">// *result and returns OK.  On failure stores nullptr in *result and</span>
  <span class="token comment">// returns non-OK.  If the file does not exist, returns a non-OK</span>
  <span class="token comment">// status.  Implementations should return a NotFound status when the file does</span>
  <span class="token comment">// not exist.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The returned file may be concurrently accessed by multiple threads.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">NewRandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                     RandomAccessFile<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Create an object that writes to a new file with the specified</span>
  <span class="token comment">// name.  Deletes any existing file with the same name and creates a</span>
  <span class="token comment">// new file.  On success, stores a pointer to the new file in</span>
  <span class="token comment">// *result and returns OK.  On failure stores nullptr in *result and</span>
  <span class="token comment">// returns non-OK.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The returned file will only be accessed by one thread at a time.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">NewWritableFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                 WritableFile<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Create an object that either appends to an existing file, or</span>
  <span class="token comment">// writes to a new file (if the file does not exist to begin with).</span>
  <span class="token comment">// On success, stores a pointer to the new file in *result and</span>
  <span class="token comment">// returns OK.  On failure stores nullptr in *result and returns</span>
  <span class="token comment">// non-OK.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The returned file will only be accessed by one thread at a time.</span>
  <span class="token comment">//</span>
  <span class="token comment">// May return an IsNotSupportedError error if this Env does</span>
  <span class="token comment">// not allow appending to an existing file.  Users of Env (including</span>
  <span class="token comment">// the leveldb implementation) must be prepared to deal with</span>
  <span class="token comment">// an Env that does not support appending.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">NewAppendableFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                   WritableFile<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Returns true iff the named file exists.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">FileExists</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Store in *result the names of the children of the specified directory.</span>
  <span class="token comment">// The names are relative to "dir".</span>
  <span class="token comment">// Original contents of *results are dropped.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">GetChildren</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dir<span class="token punctuation">,</span>
                             std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Delete the named file.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">DeleteFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Create the specified directory.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">CreateDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dirname<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Delete the specified directory.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">DeleteDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dirname<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Store the size of fname in *file_size.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">GetFileSize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">*</span> file_size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Rename file src to target.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">RenameFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> src<span class="token punctuation">,</span>
                            <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Lock the specified file.  Used to prevent concurrent access to</span>
  <span class="token comment">// the same db by multiple processes.  On failure, stores nullptr in</span>
  <span class="token comment">// *lock and returns non-OK.</span>
  <span class="token comment">//</span>
  <span class="token comment">// On success, stores a pointer to the object that represents the</span>
  <span class="token comment">// acquired lock in *lock and returns OK.  The caller should call</span>
  <span class="token comment">// UnlockFile(*lock) to release the lock.  If the process exits,</span>
  <span class="token comment">// the lock will be automatically released.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If somebody else already holds the lock, finishes immediately</span>
  <span class="token comment">// with a failure.  I.e., this call does not wait for existing locks</span>
  <span class="token comment">// to go away.</span>
  <span class="token comment">//</span>
  <span class="token comment">// May create the named file if it does not already exist.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">LockFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> FileLock<span class="token operator">*</span><span class="token operator">*</span> lock<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Release the lock acquired by a previous successful call to LockFile.</span>
  <span class="token comment">// REQUIRES: lock was returned by a successful LockFile() call</span>
  <span class="token comment">// REQUIRES: lock has not already been unlocked.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">UnlockFile</span><span class="token punctuation">(</span>FileLock<span class="token operator">*</span> lock<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Arrange to run "(*function)(arg)" once in a background thread.</span>
  <span class="token comment">//</span>
  <span class="token comment">// "function" may run in an unspecified thread.  Multiple functions</span>
  <span class="token comment">// added to the same Env may run concurrently in different threads.</span>
  <span class="token comment">// I.e., the caller may not assume that background work items are</span>
  <span class="token comment">// serialized.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Schedule</span><span class="token punctuation">(</span>
      <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Start a new thread, invoking "function(arg)" within the new thread.</span>
  <span class="token comment">// When "function(arg)" returns, the thread will be destroyed.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">StartThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// *path is set to a temporary directory that can be used for testing. It may</span>
  <span class="token comment">// or many not have just been created. The directory may or may not differ</span>
  <span class="token comment">// between runs of the same process, but subsequent calls will return the</span>
  <span class="token comment">// same directory.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">GetTestDirectory</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Create and return a log file for storing informational messages.</span>
  <span class="token keyword">virtual</span> Status <span class="token function">NewLogger</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> Logger<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Returns the number of micro-seconds since some fixed point in time. Only</span>
  <span class="token comment">// useful for computing deltas of time.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">NowMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Sleep/delay the thread for the prescribed number of micro-seconds.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SleepForMicroseconds</span><span class="token punctuation">(</span><span class="token keyword">int</span> micros<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>The comments are clear. <code>Env</code> wrap the file system, log and thread operations. The interfaces are virtual functions and need to be implmented according to the system.</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// A file abstraction for reading sequentially through a file</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> SequentialFile <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">SequentialFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">SequentialFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> SequentialFile<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  SequentialFile<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> SequentialFile<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">SequentialFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Read up to "n" bytes from the file.  "scratch[0..n-1]" may be</span>
  <span class="token comment">// written by this routine.  Sets "*result" to the data that was</span>
  <span class="token comment">// read (including if fewer than "n" bytes were successfully read).</span>
  <span class="token comment">// May set "*result" to point at data in "scratch[0..n-1]", so</span>
  <span class="token comment">// "scratch[0..n-1]" must be live when "*result" is used.</span>
  <span class="token comment">// If an error was encountered, returns a non-OK status.</span>
  <span class="token comment">//</span>
  <span class="token comment">// REQUIRES: External synchronization</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Read</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">,</span> Slice<span class="token operator">*</span> result<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> scratch<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Skip "n" bytes from the file. This is guaranteed to be no</span>
  <span class="token comment">// slower that reading the same data, but may be faster.</span>
  <span class="token comment">//</span>
  <span class="token comment">// If end of file is reached, skipping will stop at the end of the</span>
  <span class="token comment">// file, and Skip will return OK.</span>
  <span class="token comment">//</span>
  <span class="token comment">// REQUIRES: External synchronization</span>
  <span class="token keyword">virtual</span> Status <span class="token function">Skip</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>It is the interface of <code>SequentialFile</code>. There are also similar interfaces for <code>RandomAccessFile</code> and <code>WritableFile</code>. Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// An interface for writing log messages.</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> Logger <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token keyword">const</span> Logger<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  Logger<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Logger<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Write an entry to the log file with the specified format.</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Logv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Identifies a locked file.</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> FileLock <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">FileLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>

  <span class="token function">FileLock</span><span class="token punctuation">(</span><span class="token keyword">const</span> FileLock<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
  FileLock<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> FileLock<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">FileLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Log the specified data to *info_log if info_log is non-null.</span>
<span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span>Logger<span class="token operator">*</span> info_log<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__GNUC__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__clang__<span class="token punctuation">)</span></span></span>
    <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__format__</span> <span class="token punctuation">(</span>__printf__<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span>   <span class="token directive keyword">endif</span></span>
    <span class="token punctuation">;</span>

<span class="token comment">// A utility routine: write "data" to the named file.</span>
LEVELDB_EXPORT Status <span class="token function">WriteStringToFile</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// A utility routine: read contents of named file into *data</span>
LEVELDB_EXPORT Status <span class="token function">ReadFileToString</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                       std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An implementation of Env that forwards all calls to another Env.</span>
<span class="token comment">// May be useful to clients who wish to override just part of the</span>
<span class="token comment">// functionality of another Env.</span>
<span class="token keyword">class</span> <span class="token class-name">LEVELDB_EXPORT</span> EnvWrapper <span class="token operator">:</span> <span class="token keyword">public</span> Env <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// Initialize an EnvWrapper that delegates all calls to *t.</span>
  <span class="token keyword">explicit</span> <span class="token function">EnvWrapper</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">target_</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">EnvWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the target to which this Env forwards all calls.</span>
  Env<span class="token operator">*</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> target_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// The following text is boilerplate that forwards all methods to target().</span>
  Status <span class="token function">NewSequentialFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span> SequentialFile<span class="token operator">*</span><span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NewSequentialFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">NewRandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span>
                             RandomAccessFile<span class="token operator">*</span><span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NewRandomAccessFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">NewWritableFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span> WritableFile<span class="token operator">*</span><span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NewWritableFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">NewAppendableFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span> WritableFile<span class="token operator">*</span><span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NewAppendableFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">bool</span> <span class="token function">FileExists</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">FileExists</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">GetChildren</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dir<span class="token punctuation">,</span>
                     std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">GetChildren</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">DeleteFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">DeleteFile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">CreateDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">CreateDir</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">DeleteDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">DeleteDir</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">GetFileSize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">GetFileSize</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">RenameFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">RenameFile</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">LockFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> f<span class="token punctuation">,</span> FileLock<span class="token operator">*</span><span class="token operator">*</span> l<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">LockFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">UnlockFile</span><span class="token punctuation">(</span>FileLock<span class="token operator">*</span> l<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">UnlockFile</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">Schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">Schedule</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">StartThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">StartThread</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">GetTestDirectory</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">GetTestDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Status <span class="token function">NewLogger</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> Logger<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NewLogger</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">uint64_t</span> <span class="token function">NowMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target_<span class="token operator">-></span><span class="token function">NowMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SleepForMicroseconds</span><span class="token punctuation">(</span><span class="token keyword">int</span> micros<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    target_<span class="token operator">-></span><span class="token function">SleepForMicroseconds</span><span class="token punctuation">(</span>micros<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  Env<span class="token operator">*</span> target_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p><code>EnvWrapper</code> is a simple wrapper to <code>Env</code>. As mentioned in comments, it may be useful to clients who wish to override just part of the functionality of another <code>Env</code>. In <code>util/env.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token class-name">Env</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

Status <span class="token class-name">Env</span><span class="token double-colon punctuation">::</span><span class="token function">NewAppendableFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> WritableFile<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">NotSupported</span><span class="token punctuation">(</span><span class="token string">"NewAppendableFile"</span><span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SequentialFile</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">SequentialFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">RandomAccessFile</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">RandomAccessFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">WritableFile</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">WritableFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">Logger</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">FileLock</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">FileLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span>Logger<span class="token operator">*</span> info_log<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>info_log <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    va_list ap<span class="token punctuation">;</span>
    <span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    info_log<span class="token operator">-></span><span class="token function">Logv</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> Status <span class="token function">DoWriteStringToFile</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span>
                                  <span class="token keyword">bool</span> should_sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  WritableFile<span class="token operator">*</span> file<span class="token punctuation">;</span>
  Status s <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">NewWritableFile</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  s <span class="token operator">=</span> file<span class="token operator">-></span><span class="token function">Append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> should_sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> file<span class="token operator">-></span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> file<span class="token operator">-></span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span> file<span class="token punctuation">;</span>  <span class="token comment">// Will auto-close if we did not close above</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    env<span class="token operator">-></span><span class="token function">DeleteFile</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Status <span class="token function">WriteStringToFile</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                         <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">DoWriteStringToFile</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fname<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Status <span class="token function">WriteStringToFileSync</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                             <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">DoWriteStringToFile</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fname<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Status <span class="token function">ReadFileToString</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  SequentialFile<span class="token operator">*</span> file<span class="token punctuation">;</span>
  Status s <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">NewSequentialFile</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kBufferSize <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> space <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>kBufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Slice fragment<span class="token punctuation">;</span>
    s <span class="token operator">=</span> file<span class="token operator">-></span><span class="token function">Read</span><span class="token punctuation">(</span>kBufferSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fragment<span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    data<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fragment<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> space<span class="token punctuation">;</span>
  <span class="token keyword">delete</span> file<span class="token punctuation">;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">EnvWrapper</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">EnvWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2019.02.25" tabindex="-1"><a href="#2019.02.25">2019.02.25</a></h3>
<p>View <code>db/memtable.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"leveldb/db.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"db/dbformat.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"db/skiplist.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util/arena.h"</span></span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token keyword">class</span> <span class="token class-name">InternalKeyComparator</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">MemTableIterator</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MemTable</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token comment">// MemTables are reference counted.  The initial reference count</span>
  <span class="token comment">// is zero and the caller must call Ref() at least once.</span>
  <span class="token keyword">explicit</span> <span class="token function">MemTable</span><span class="token punctuation">(</span><span class="token keyword">const</span> InternalKeyComparator<span class="token operator">&amp;</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Increase reference count.</span>
  <span class="token keyword">void</span> <span class="token function">Ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>refs_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token comment">// Drop reference count.  Delete if no more references exist.</span>
  <span class="token keyword">void</span> <span class="token function">Unref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">--</span>refs_<span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>refs_ <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>refs_ <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Returns an estimate of the number of bytes of data in use by this</span>
  <span class="token comment">// data structure. It is safe to call when MemTable is being modified.</span>
  size_t <span class="token function">ApproximateMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return an iterator that yields the contents of the memtable.</span>
  <span class="token comment">//</span>
  <span class="token comment">// The caller must ensure that the underlying MemTable remains live</span>
  <span class="token comment">// while the returned iterator is live.  The keys returned by this</span>
  <span class="token comment">// iterator are internal keys encoded by AppendInternalKey in the</span>
  <span class="token comment">// db/format.{h,cc} module.</span>
  Iterator<span class="token operator">*</span> <span class="token function">NewIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Add an entry into memtable that maps key to value at the</span>
  <span class="token comment">// specified sequence number and with the specified type.</span>
  <span class="token comment">// Typically value will be empty if type==kTypeDeletion.</span>
  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span>SequenceNumber seq<span class="token punctuation">,</span> ValueType type<span class="token punctuation">,</span>
           <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
           <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// If memtable contains a value for key, store it in *value and return true.</span>
  <span class="token comment">// If memtable contains a deletion for key, store a NotFound() error</span>
  <span class="token comment">// in *status and return true.</span>
  <span class="token comment">// Else, return false.</span>
  <span class="token keyword">bool</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> LookupKey<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">,</span> Status<span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token operator">~</span><span class="token function">MemTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Private since only Unref() should be used to delete it</span>

  <span class="token keyword">struct</span> <span class="token class-name">KeyComparator</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> InternalKeyComparator comparator<span class="token punctuation">;</span>
    <span class="token keyword">explicit</span> <span class="token function">KeyComparator</span><span class="token punctuation">(</span><span class="token keyword">const</span> InternalKeyComparator<span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">comparator</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">MemTableIterator</span><span class="token punctuation">;</span>
  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">MemTableBackwardIterator</span><span class="token punctuation">;</span>

  <span class="token keyword">typedef</span> SkipList<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> KeyComparator<span class="token operator">></span> Table<span class="token punctuation">;</span>

  KeyComparator comparator_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> refs_<span class="token punctuation">;</span>
  Arena arena_<span class="token punctuation">;</span>
  Table table_<span class="token punctuation">;</span>

  <span class="token comment">// No copying allowed</span>
  <span class="token function">MemTable</span><span class="token punctuation">(</span><span class="token keyword">const</span> MemTable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MemTable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p><code>MemTable</code> use <code>Arena</code> and <code>SkipList</code> to implement <code>Add</code> and <code>Get</code> APIs. Details in <code>db/memtable.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">static</span> Slice <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">uint32_t</span> len<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> data<span class="token punctuation">;</span>
  p <span class="token operator">=</span> <span class="token function">GetVarint32Ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// +5: we assume "p" is not corrupted</span>
  <span class="token keyword">return</span> <span class="token function">Slice</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token function">MemTable</span><span class="token punctuation">(</span><span class="token keyword">const</span> InternalKeyComparator<span class="token operator">&amp;</span> cmp<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token function">comparator_</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">refs_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">table_</span><span class="token punctuation">(</span>comparator_<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arena_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MemTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>refs_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

size_t <span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token function">ApproximateMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arena_<span class="token punctuation">.</span><span class="token function">MemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> MemTable<span class="token double-colon punctuation">::</span><span class="token class-name">KeyComparator</span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> aptr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> bptr<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// Internal keys are encoded as length-prefixed strings.</span>
  Slice a <span class="token operator">=</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>aptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Slice b <span class="token operator">=</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>bptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> comparator<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Encode a suitable internal key target for "target" and return it.</span>
<span class="token comment">// Uses *scratch as scratch space, and the returned pointer will point</span>
<span class="token comment">// into this scratch space.</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">EncodeKey</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> scratch<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  scratch<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">PutVarint32</span><span class="token punctuation">(</span>scratch<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  scratch<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> scratch<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MemTableIterator</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Iterator</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">MemTableIterator</span><span class="token punctuation">(</span>MemTable<span class="token double-colon punctuation">::</span>Table<span class="token operator">*</span> table<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">iter_</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> iter_<span class="token punctuation">.</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> iter_<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token function">EncodeKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp_<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token comment">// SF: tmp_ can manage the memory of encoding key</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> iter_<span class="token punctuation">.</span><span class="token function">SeekToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> iter_<span class="token punctuation">.</span><span class="token function">SeekToLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> iter_<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> iter_<span class="token punctuation">.</span><span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> Slice <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>iter_<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">virtual</span> Slice <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    Slice key_slice <span class="token operator">=</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>iter_<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>key_slice<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> key_slice<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> Status <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  MemTable<span class="token double-colon punctuation">::</span>Table<span class="token double-colon punctuation">::</span>Iterator iter_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string tmp_<span class="token punctuation">;</span>       <span class="token comment">// For passing to EncodeKey</span>

  <span class="token comment">// No copying allowed</span>
  <span class="token function">MemTableIterator</span><span class="token punctuation">(</span><span class="token keyword">const</span> MemTableIterator<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MemTableIterator<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Iterator<span class="token operator">*</span> <span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token function">NewIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">MemTableIterator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token function">Add</span><span class="token punctuation">(</span>SequenceNumber s<span class="token punctuation">,</span> ValueType type<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> key<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Format of an entry is concatenation of:</span>
  <span class="token comment">//  key_size     : varint32 of internal_key.size()</span>
  <span class="token comment">//  key bytes    : char[internal_key.size()]</span>
  <span class="token comment">//  value_size   : varint32 of value.size()</span>
  <span class="token comment">//  value bytes  : char[value.size()]</span>
  size_t key_size <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t val_size <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t internal_key_size <span class="token operator">=</span> key_size <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> size_t encoded_len <span class="token operator">=</span>
      <span class="token function">VarintLength</span><span class="token punctuation">(</span>internal_key_size<span class="token punctuation">)</span> <span class="token operator">+</span> internal_key_size <span class="token operator">+</span>
      <span class="token function">VarintLength</span><span class="token punctuation">(</span>val_size<span class="token punctuation">)</span> <span class="token operator">+</span> val_size<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> arena_<span class="token punctuation">.</span><span class="token function">Allocate</span><span class="token punctuation">(</span>encoded_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">EncodeVarint32</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> internal_key_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  p <span class="token operator">+=</span> key_size<span class="token punctuation">;</span>
  <span class="token function">EncodeFixed64</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  p <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  p <span class="token operator">=</span> <span class="token function">EncodeVarint32</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> val_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>p <span class="token operator">+</span> val_size <span class="token operator">==</span> buf <span class="token operator">+</span> encoded_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  table_<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">MemTable</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> LookupKey<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> value<span class="token punctuation">,</span> Status<span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Slice memkey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">memtable_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Table<span class="token double-colon punctuation">::</span>Iterator <span class="token function">iter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  iter<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>memkey<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">Valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// entry format is:</span>
    <span class="token comment">//    klength  varint32</span>
    <span class="token comment">//    userkey  char[klength]</span>
    <span class="token comment">//    tag      uint64</span>
    <span class="token comment">//    vlength  varint32</span>
    <span class="token comment">//    value    char[vlength]</span>
    <span class="token comment">// Check that it belongs to same user key.  We do not check the</span>
    <span class="token comment">// sequence number since the Seek() call above should have skipped</span>
    <span class="token comment">// all entries with overly large sequence numbers.</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> entry <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> key_length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_ptr <span class="token operator">=</span> <span class="token function">GetVarint32Ptr</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> entry<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator_<span class="token punctuation">.</span>comparator<span class="token punctuation">.</span><span class="token function">user_comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">Compare</span><span class="token punctuation">(</span>
            <span class="token function">Slice</span><span class="token punctuation">(</span>key_ptr<span class="token punctuation">,</span> key_length <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            key<span class="token punctuation">.</span><span class="token function">user_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Correct user key</span>
      <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> tag <span class="token operator">=</span> <span class="token function">DecodeFixed64</span><span class="token punctuation">(</span>key_ptr <span class="token operator">+</span> key_length <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>ValueType<span class="token operator">></span></span></span><span class="token punctuation">(</span>tag <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> kTypeValue<span class="token operator">:</span> <span class="token punctuation">{</span>
          Slice v <span class="token operator">=</span> <span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span>key_ptr <span class="token operator">+</span> key_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
          value<span class="token operator">-></span><span class="token function">assign</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> kTypeDeletion<span class="token operator">:</span>
          <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token function">Slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In <code>Add</code> function, <code>key</code> and <code>value</code> are encoded into <code>buf</code>, then it is insert into skiplist <code>table_</code>.</p>
<h3 id="2019.02.27" tabindex="-1"><a href="#2019.02.27">2019.02.27</a></h3>
<p>View <code>db/version_edit.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">VersionSet</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">FileMetaData</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> refs<span class="token punctuation">;</span>
  <span class="token keyword">int</span> allowed_seeks<span class="token punctuation">;</span>          <span class="token comment">// Seeks allowed until compaction</span>
  <span class="token keyword">uint64_t</span> number<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> file_size<span class="token punctuation">;</span>         <span class="token comment">// File size in bytes</span>
  InternalKey smallest<span class="token punctuation">;</span>       <span class="token comment">// Smallest internal key served by table</span>
  InternalKey largest<span class="token punctuation">;</span>        <span class="token comment">// Largest internal key served by table</span>

  <span class="token function">FileMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">refs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">allowed_seeks</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">file_size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">VersionEdit</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">VersionEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">VersionEdit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">SetComparatorName</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    has_comparator_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    comparator_ <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetLogNumber</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    has_log_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    log_number_ <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetPrevLogNumber</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    has_prev_log_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    prev_log_number_ <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetNextFile</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    has_next_file_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    next_file_number_ <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetLastSequence</span><span class="token punctuation">(</span>SequenceNumber seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    has_last_sequence_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    last_sequence_ <span class="token operator">=</span> seq<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">SetCompactPointer</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compact_pointers_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Add the specified file at the specified number.</span>
  <span class="token comment">// REQUIRES: This version has not been saved (see VersionSet::SaveTo)</span>
  <span class="token comment">// REQUIRES: "smallest" and "largest" are smallest and largest keys in file</span>
  <span class="token keyword">void</span> <span class="token function">AddFile</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> file<span class="token punctuation">,</span>
               <span class="token keyword">uint64_t</span> file_size<span class="token punctuation">,</span>
               <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> smallest<span class="token punctuation">,</span>
               <span class="token keyword">const</span> InternalKey<span class="token operator">&amp;</span> largest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FileMetaData f<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>number <span class="token operator">=</span> file<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>file_size <span class="token operator">=</span> file_size<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>smallest <span class="token operator">=</span> smallest<span class="token punctuation">;</span>
    f<span class="token punctuation">.</span>largest <span class="token operator">=</span> largest<span class="token punctuation">;</span>
    new_files_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Delete the specified "file" from the specified "level".</span>
  <span class="token keyword">void</span> <span class="token function">DeleteFile</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deleted_files_<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">EncodeTo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  Status <span class="token function">DecodeFrom</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string <span class="token function">DebugString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">VersionSet</span><span class="token punctuation">;</span>

  <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">uint64_t</span><span class="token operator">></span> <span class="token operator">></span> DeletedFileSet<span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string comparator_<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> log_number_<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> prev_log_number_<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> next_file_number_<span class="token punctuation">;</span>
  SequenceNumber last_sequence_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> has_comparator_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> has_log_number_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> has_prev_log_number_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> has_next_file_number_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> has_last_sequence_<span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> InternalKey<span class="token operator">></span> <span class="token operator">></span> compact_pointers_<span class="token punctuation">;</span>
  DeletedFileSet deleted_files_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> FileMetaData<span class="token operator">></span> <span class="token operator">></span> new_files_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p><code>VersionEdit</code> is a config entity that stores comparator, log number and last sequence etc. This entity can be encoded into string and vice versa. View <code>db/version_edit.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">VersionEdit</span><span class="token double-colon punctuation">::</span><span class="token function">EncodeTo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> dst<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_comparator_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> comparator_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_log_number_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kLogNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> log_number_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_prev_log_number_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kPrevLogNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> prev_log_number_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_next_file_number_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kNextFileNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> next_file_number_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_last_sequence_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kLastSequence<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> last_sequence_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> compact_pointers_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kCompactPointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> compact_pointers_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// level</span>
    <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> compact_pointers_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>DeletedFileSet<span class="token double-colon punctuation">::</span>const_iterator iter <span class="token operator">=</span> deleted_files_<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       iter <span class="token operator">!=</span> deleted_files_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">++</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kDeletedFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> iter<span class="token operator">-></span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// level</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> iter<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// file number</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> new_files_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> FileMetaData<span class="token operator">&amp;</span> f <span class="token operator">=</span> new_files_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> kNewFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint32</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> new_files_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// level</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> f<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutVarint64</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> f<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> f<span class="token punctuation">.</span>smallest<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PutLengthPrefixedSlice</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> f<span class="token punctuation">.</span>largest<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Status <span class="token class-name">VersionEdit</span><span class="token double-colon punctuation">::</span><span class="token function">DecodeFrom</span><span class="token punctuation">(</span><span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Slice input <span class="token operator">=</span> src<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> tag<span class="token punctuation">;</span>

  <span class="token comment">// Temporary storage for parsing</span>
  <span class="token keyword">int</span> level<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> number<span class="token punctuation">;</span>
  FileMetaData f<span class="token punctuation">;</span>
  Slice str<span class="token punctuation">;</span>
  InternalKey key<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> <span class="token function">GetVarint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> kComparator<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetLengthPrefixedSlice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          comparator_ <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          has_comparator_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"comparator name"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kLogNumber<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>log_number_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          has_log_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"log number"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kPrevLogNumber<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev_log_number_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          has_prev_log_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"previous log number"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kNextFileNumber<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>next_file_number_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          has_next_file_number_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"next file number"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kLastSequence<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>last_sequence_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          has_last_sequence_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"last sequence number"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kCompactPointer<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>level<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetInternalKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          compact_pointers_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"compaction pointer"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kDeletedFile<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>level<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          deleted_files_<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"deleted file"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> kNewFile<span class="token operator">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>level<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetVarint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetInternalKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">.</span>smallest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">GetInternalKey</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">.</span>largest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          new_files_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          msg <span class="token operator">=</span> <span class="token string">"new-file entry"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">default</span><span class="token operator">:</span>
        msg <span class="token operator">=</span> <span class="token string">"unknown tag"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>input<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    msg <span class="token operator">=</span> <span class="token string">"invalid tag"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Status result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token double-colon punctuation">::</span><span class="token function">Corruption</span><span class="token punctuation">(</span><span class="token string">"VersionEdit"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2019.06.03" tabindex="-1"><a href="#2019.06.03">2019.06.03</a></h3>
<p>View <code>db/filename.h</code> &amp; <code>db/filename.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// db/filename.h</span>
<span class="token keyword">enum</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>
  kLogFile<span class="token punctuation">,</span>
  kDBLockFile<span class="token punctuation">,</span>
  kTableFile<span class="token punctuation">,</span>
  kDescriptorFile<span class="token punctuation">,</span>
  kCurrentFile<span class="token punctuation">,</span>
  kTempFile<span class="token punctuation">,</span>
  kInfoLogFile  <span class="token comment">// Either the current one, or an old one</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// db/filename.cc</span>

<span class="token keyword">namespace</span> leveldb <span class="token punctuation">{</span>

<span class="token comment">// A utility routine: write "data" to the named file and Sync() it.</span>
Status <span class="token function">WriteStringToFileSync</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> Slice<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                             <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> fname<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">MakeFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">,</span>
                                <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/%06llu.%s"</span><span class="token punctuation">,</span>
           <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>
           suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">LogFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">MakeFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> number<span class="token punctuation">,</span> <span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">TableFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">MakeFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> number<span class="token punctuation">,</span> <span class="token string">"ldb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">SSTTableFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">MakeFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> number<span class="token punctuation">,</span> <span class="token string">"sst"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">DescriptorFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/MANIFEST-%06llu"</span><span class="token punctuation">,</span>
           <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">CurrentFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> <span class="token string">"/CURRENT"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">LockFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> <span class="token string">"/LOCK"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">TempFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">MakeFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> number<span class="token punctuation">,</span> <span class="token string">"dbtmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token function">InfoLogFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> <span class="token string">"/LOG"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Return the name of the old info log file for "dbname".</span>
std<span class="token double-colon punctuation">::</span>string <span class="token function">OldInfoLogFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> dbname <span class="token operator">+</span> <span class="token string">"/LOG.old"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// Owned filenames have the form:</span>
<span class="token comment">//    dbname/CURRENT</span>
<span class="token comment">//    dbname/LOCK</span>
<span class="token comment">//    dbname/LOG</span>
<span class="token comment">//    dbname/LOG.old</span>
<span class="token comment">//    dbname/MANIFEST-[0-9]+</span>
<span class="token comment">//    dbname/[0-9]+.(log|sst|ldb)</span>
<span class="token keyword">bool</span> <span class="token function">ParseFileName</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> filename<span class="token punctuation">,</span>
                   <span class="token keyword">uint64_t</span><span class="token operator">*</span> number<span class="token punctuation">,</span>
                   FileType<span class="token operator">*</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Slice <span class="token function">rest</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token string">"CURRENT"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>type <span class="token operator">=</span> kCurrentFile<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token string">"LOCK"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>type <span class="token operator">=</span> kDBLockFile<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token string">"LOG"</span> <span class="token operator">||</span> rest <span class="token operator">==</span> <span class="token string">"LOG.old"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>type <span class="token operator">=</span> kInfoLogFile<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rest<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span><span class="token string">"MANIFEST-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rest<span class="token punctuation">.</span><span class="token function">remove_prefix</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"MANIFEST-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint64_t</span> num<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ConsumeDecimalNumber</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rest<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rest<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>type <span class="token operator">=</span> kDescriptorFile<span class="token punctuation">;</span>
    <span class="token operator">*</span>number <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Avoid strtoull() to keep filename format independent of the</span>
    <span class="token comment">// current locale</span>
    <span class="token keyword">uint64_t</span> num<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ConsumeDecimalNumber</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rest<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Slice suffix <span class="token operator">=</span> rest<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">==</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token string">".log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>type <span class="token operator">=</span> kLogFile<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">==</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token string">".sst"</span><span class="token punctuation">)</span> <span class="token operator">||</span> suffix <span class="token operator">==</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token string">".ldb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>type <span class="token operator">=</span> kTableFile<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">==</span> <span class="token function">Slice</span><span class="token punctuation">(</span><span class="token string">".dbtmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>type <span class="token operator">=</span> kTempFile<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>number <span class="token operator">=</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Status <span class="token function">SetCurrentFile</span><span class="token punctuation">(</span>Env<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> dbname<span class="token punctuation">,</span>
                      <span class="token keyword">uint64_t</span> descriptor_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Remove leading "dbname/" and add newline to manifest file name</span>
  std<span class="token double-colon punctuation">::</span>string manifest <span class="token operator">=</span> <span class="token function">DescriptorFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> descriptor_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Slice contents <span class="token operator">=</span> manifest<span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation">(</span>dbname <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  contents<span class="token punctuation">.</span><span class="token function">remove_prefix</span><span class="token punctuation">(</span>dbname<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string tmp <span class="token operator">=</span> <span class="token function">TempFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">,</span> descriptor_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Status s <span class="token operator">=</span> <span class="token function">WriteStringToFileSync</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> contents<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> env<span class="token operator">-></span><span class="token function">RenameFile</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token function">CurrentFileName</span><span class="token punctuation">(</span>dbname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    env<span class="token operator">-></span><span class="token function">DeleteFile</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace leveldb</span>
</code></pre>
<p><code>SetCurrentFile</code> write <code>manifest</code> info into <code>CURRENT</code> file.</p>
<h3 id="2019.07.05" tabindex="-1"><a href="#2019.07.05">2019.07.05</a></h3>
<p>View <code>util/histogram.h</code> and <code>util/histogram.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Histogram</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Histogram</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">Histogram</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> Histogram<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">enum</span> <span class="token punctuation">{</span> kNumBuckets <span class="token operator">=</span> <span class="token number">154</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> <span class="token function">Median</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> <span class="token function">Percentile</span><span class="token punctuation">(</span><span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> <span class="token function">Average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> <span class="token function">StandardDeviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">double</span> kBucketLimit<span class="token punctuation">[</span>kNumBuckets<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> min_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> max_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> num_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> sum_<span class="token punctuation">;</span>
  <span class="token comment">// SF: use in fast std calculation</span>
  <span class="token keyword">double</span> sum_squares_<span class="token punctuation">;</span>

  <span class="token keyword">double</span> buckets_<span class="token punctuation">[</span>kNumBuckets<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// histogram.cc</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> Histogram<span class="token double-colon punctuation">::</span>kBucketLimit<span class="token punctuation">[</span>kNumBuckets<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2500</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">3500</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">4500</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">,</span> <span class="token number">14000</span><span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token number">18000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token number">35000</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token number">45000</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token number">70000</span><span class="token punctuation">,</span> <span class="token number">80000</span><span class="token punctuation">,</span> <span class="token number">90000</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">,</span> <span class="token number">140000</span><span class="token punctuation">,</span> <span class="token number">160000</span><span class="token punctuation">,</span> <span class="token number">180000</span><span class="token punctuation">,</span> <span class="token number">200000</span><span class="token punctuation">,</span> <span class="token number">250000</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">350000</span><span class="token punctuation">,</span> <span class="token number">400000</span><span class="token punctuation">,</span> <span class="token number">450000</span><span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">,</span> <span class="token number">600000</span><span class="token punctuation">,</span> <span class="token number">700000</span><span class="token punctuation">,</span> <span class="token number">800000</span><span class="token punctuation">,</span> <span class="token number">900000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">1200000</span><span class="token punctuation">,</span> <span class="token number">1400000</span><span class="token punctuation">,</span> <span class="token number">1600000</span><span class="token punctuation">,</span> <span class="token number">1800000</span><span class="token punctuation">,</span> <span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token number">2500000</span><span class="token punctuation">,</span> <span class="token number">3000000</span><span class="token punctuation">,</span> <span class="token number">3500000</span><span class="token punctuation">,</span> <span class="token number">4000000</span><span class="token punctuation">,</span> <span class="token number">4500000</span><span class="token punctuation">,</span> <span class="token number">5000000</span><span class="token punctuation">,</span> <span class="token number">6000000</span><span class="token punctuation">,</span> <span class="token number">7000000</span><span class="token punctuation">,</span> <span class="token number">8000000</span><span class="token punctuation">,</span> <span class="token number">9000000</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">12000000</span><span class="token punctuation">,</span> <span class="token number">14000000</span><span class="token punctuation">,</span> <span class="token number">16000000</span><span class="token punctuation">,</span> <span class="token number">18000000</span><span class="token punctuation">,</span> <span class="token number">20000000</span><span class="token punctuation">,</span> <span class="token number">25000000</span><span class="token punctuation">,</span> <span class="token number">30000000</span><span class="token punctuation">,</span> <span class="token number">35000000</span><span class="token punctuation">,</span> <span class="token number">40000000</span><span class="token punctuation">,</span> <span class="token number">45000000</span><span class="token punctuation">,</span> <span class="token number">50000000</span><span class="token punctuation">,</span> <span class="token number">60000000</span><span class="token punctuation">,</span> <span class="token number">70000000</span><span class="token punctuation">,</span> <span class="token number">80000000</span><span class="token punctuation">,</span> <span class="token number">90000000</span><span class="token punctuation">,</span> <span class="token number">100000000</span><span class="token punctuation">,</span> <span class="token number">120000000</span><span class="token punctuation">,</span> <span class="token number">140000000</span><span class="token punctuation">,</span> <span class="token number">160000000</span><span class="token punctuation">,</span> <span class="token number">180000000</span><span class="token punctuation">,</span> <span class="token number">200000000</span><span class="token punctuation">,</span> <span class="token number">250000000</span><span class="token punctuation">,</span> <span class="token number">300000000</span><span class="token punctuation">,</span> <span class="token number">350000000</span><span class="token punctuation">,</span> <span class="token number">400000000</span><span class="token punctuation">,</span> <span class="token number">450000000</span><span class="token punctuation">,</span> <span class="token number">500000000</span><span class="token punctuation">,</span> <span class="token number">600000000</span><span class="token punctuation">,</span> <span class="token number">700000000</span><span class="token punctuation">,</span> <span class="token number">800000000</span><span class="token punctuation">,</span> <span class="token number">900000000</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">1200000000</span><span class="token punctuation">,</span> <span class="token number">1400000000</span><span class="token punctuation">,</span> <span class="token number">1600000000</span><span class="token punctuation">,</span> <span class="token number">1800000000</span><span class="token punctuation">,</span> <span class="token number">2000000000</span><span class="token punctuation">,</span> <span class="token number">2500000000.0</span><span class="token punctuation">,</span> <span class="token number">3000000000.0</span><span class="token punctuation">,</span> <span class="token number">3500000000.0</span><span class="token punctuation">,</span> <span class="token number">4000000000.0</span><span class="token punctuation">,</span> <span class="token number">4500000000.0</span><span class="token punctuation">,</span> <span class="token number">5000000000.0</span><span class="token punctuation">,</span> <span class="token number">6000000000.0</span><span class="token punctuation">,</span> <span class="token number">7000000000.0</span><span class="token punctuation">,</span> <span class="token number">8000000000.0</span><span class="token punctuation">,</span> <span class="token number">9000000000.0</span><span class="token punctuation">,</span> <span class="token number">1e200</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  min_ <span class="token operator">=</span> kBucketLimit<span class="token punctuation">[</span>kNumBuckets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  max_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  num_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  sum_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  sum_squares_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> kNumBuckets<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buckets_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Linear search is fast enough for our usage in db_bench</span>
  <span class="token comment">// SF: why not binary search 😂</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> kNumBuckets <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> kBucketLimit<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    b<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>min_ <span class="token operator">></span> value<span class="token punctuation">)</span> min_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>max_ <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> max_ <span class="token operator">=</span> value<span class="token punctuation">;</span>
  num_<span class="token operator">++</span><span class="token punctuation">;</span>
  sum_ <span class="token operator">+=</span> value<span class="token punctuation">;</span>
  sum_squares_ <span class="token operator">+=</span> <span class="token punctuation">(</span>value <span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Merge</span><span class="token punctuation">(</span><span class="token keyword">const</span> Histogram<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>min_ <span class="token operator">&lt;</span> min_<span class="token punctuation">)</span> min_ <span class="token operator">=</span> other<span class="token punctuation">.</span>min_<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>max_ <span class="token operator">></span> max_<span class="token punctuation">)</span> max_ <span class="token operator">=</span> other<span class="token punctuation">.</span>max_<span class="token punctuation">;</span>
  num_ <span class="token operator">+=</span> other<span class="token punctuation">.</span>num_<span class="token punctuation">;</span>
  sum_ <span class="token operator">+=</span> other<span class="token punctuation">.</span>sum_<span class="token punctuation">;</span>
  sum_squares_ <span class="token operator">+=</span> other<span class="token punctuation">.</span>sum_squares_<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> kNumBuckets<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+=</span> other<span class="token punctuation">.</span>buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Median</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Percentile</span><span class="token punctuation">(</span><span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Percentile</span><span class="token punctuation">(</span><span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> threshold <span class="token operator">=</span> num_ <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> kNumBuckets<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Scale linearly within this bucket</span>
      <span class="token keyword">double</span> left_point <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> kBucketLimit<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> right_point <span class="token operator">=</span> kBucketLimit<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> left_sum <span class="token operator">=</span> sum <span class="token operator">-</span> buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> right_sum <span class="token operator">=</span> sum<span class="token punctuation">;</span>
      <span class="token keyword">double</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>threshold <span class="token operator">-</span> left_sum<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>right_sum <span class="token operator">-</span> left_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> r <span class="token operator">=</span> left_point <span class="token operator">+</span> <span class="token punctuation">(</span>right_point <span class="token operator">-</span> left_point<span class="token punctuation">)</span> <span class="token operator">*</span> pos<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> min_<span class="token punctuation">)</span> r <span class="token operator">=</span> min_<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> max_<span class="token punctuation">)</span> r <span class="token operator">=</span> max_<span class="token punctuation">;</span>
      <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> max_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">Average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num_ <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum_ <span class="token operator">/</span> num_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">double</span> <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">StandardDeviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num_ <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">double</span> variance <span class="token operator">=</span> <span class="token punctuation">(</span>sum_squares_ <span class="token operator">*</span> num_ <span class="token operator">-</span> sum_ <span class="token operator">*</span> sum_<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>num_ <span class="token operator">*</span> num_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>variance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

std<span class="token double-colon punctuation">::</span>string <span class="token class-name">Histogram</span><span class="token double-colon punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>string r<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Count: %.0f  Average: %.4f  StdDev: %.2f\n"</span><span class="token punctuation">,</span> num_<span class="token punctuation">,</span>
           <span class="token function">Average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">StandardDeviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Min: %.4f  Median: %.4f  Max: %.4f\n"</span><span class="token punctuation">,</span>
           <span class="token punctuation">(</span>num_ <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> min_<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Median</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">double</span> mult <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">/</span> num_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> kNumBuckets<span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    sum <span class="token operator">+=</span> buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"[ %7.0f, %7.0f ) %7.0f %7.3f%% %7.3f%% "</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> kBucketLimit<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// left</span>
             kBucketLimit<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token comment">// right</span>
             buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>                             <span class="token comment">// count</span>
             mult <span class="token operator">*</span> buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token comment">// percentage</span>
             mult <span class="token operator">*</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// cumulative percentage</span>
    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Add hash marks based on percentage; 20 marks for 100%.</span>
    <span class="token keyword">int</span> marks <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token punctuation">(</span>buckets_<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">/</span> num_<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>marks<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This <code>histogram</code> is only used in benchmarks.</p>
<h3 id="2019.07.07" tabindex="-1"><a href="#2019.07.07">2019.07.07</a></h3>
<p>View <code>util/testharness.h</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token comment">// An instance of Tester is allocated to hold temporary state during</span>
<span class="token comment">// the execution of an assertion.</span>
<span class="token keyword">class</span> <span class="token class-name">Tester</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">bool</span> ok_<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fname_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> line_<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>stringstream ss_<span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Tester</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ok_</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fname_</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">line_</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token operator">~</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s:%d:%s\n"</span><span class="token punctuation">,</span> fname_<span class="token punctuation">,</span> line_<span class="token punctuation">,</span> ss_<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  Tester<span class="token operator">&amp;</span> <span class="token function">Is</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ss_ <span class="token operator">&lt;&lt;</span> <span class="token string">" Assertion failure "</span> <span class="token operator">&lt;&lt;</span> msg<span class="token punctuation">;</span>
      ok_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Tester<span class="token operator">&amp;</span> <span class="token function">IsOk</span><span class="token punctuation">(</span><span class="token keyword">const</span> Status<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ss_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ok_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BINARY_OP</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> op<span class="token punctuation">)</span>                          </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token operator">></span>                        </span><span class="token punctuation">\</span>
  <span class="token expression">Tester<span class="token operator">&amp;</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> Y<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>             </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x op y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                 </span><span class="token punctuation">\</span>
      <span class="token expression">ss_ <span class="token operator">&lt;&lt;</span> </span><span class="token string">" failed: "</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span></span><span class="token string">" "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">op</span> </span></span><span class="token string">" "</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> y<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
      <span class="token expression">ok_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>                                    </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">}</span></span></span>

  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsEq<span class="token punctuation">,</span> <span class="token operator">==</span><span class="token punctuation">)</span>
  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsNe<span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token punctuation">)</span>
  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsGe<span class="token punctuation">,</span> <span class="token operator">>=</span><span class="token punctuation">)</span>
  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsGt<span class="token punctuation">,</span> <span class="token operator">></span><span class="token punctuation">)</span>
  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsLe<span class="token punctuation">,</span> <span class="token operator">&lt;=</span><span class="token punctuation">)</span>
  <span class="token function">BINARY_OP</span><span class="token punctuation">(</span>IsLt<span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">BINARY_OP</span></span>

  <span class="token comment">// Attach the specified value to the error message if an error has occurred</span>
  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">V</span><span class="token operator">></span>
  Tester<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> V<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ss_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_TRUE</span><span class="token expression"><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> #c<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_OK</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsOk</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_EQ</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsEq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_NE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsNe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_GE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsGe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_GT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsGt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_LE</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsLe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ASSERT_LT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsLt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre>
<p>The <code>BINARY_OP</code> macro defines multi comparison operators, and do <code>undef</code> after use. Continue:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TCONCAT</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token function">TCONCAT1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TCONCAT1</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a</span><span class="token punctuation">##</span><span class="token expression">b</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">TEST</span><span class="token expression"><span class="token punctuation">(</span>base<span class="token punctuation">,</span> name<span class="token punctuation">)</span>                                              </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">class</span> <span class="token class-name">TCONCAT</span><span class="token punctuation">(</span>_Test_<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">public</span> base <span class="token punctuation">{</span>                         </span><span class="token punctuation">\</span>
   <span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span>                                                            </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">void</span> <span class="token function">_Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_RunIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token function">TCONCAT</span><span class="token punctuation">(</span>_Test_<span class="token punctuation">,</span> name<span class="token punctuation">)</span> t<span class="token punctuation">;</span>                                        </span><span class="token punctuation">\</span>
      <span class="token expression">t<span class="token punctuation">.</span><span class="token function">_Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                       </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                                 </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">;</span>                                                                  </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">bool</span> <span class="token function">TCONCAT</span><span class="token punctuation">(</span>_Test_ignored_<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token double-colon punctuation">::</span>leveldb<span class="token double-colon punctuation">::</span>test<span class="token double-colon punctuation">::</span><span class="token function">RegisterTest</span><span class="token punctuation">(</span> </span><span class="token punctuation">\</span>
      <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">base</span><span class="token expression"><span class="token punctuation">,</span> #name<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">TCONCAT</span><span class="token punctuation">(</span>_Test_<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span>_RunIt<span class="token punctuation">)</span><span class="token punctuation">;</span>                  </span></span></span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">void</span> <span class="token function">TCONCAT</span><span class="token punctuation">(</span>_Test_<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token double-colon punctuation">::</span><span class="token function">_Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>

<span class="token comment">// Register the specified test.  Typically not used directly, but</span>
<span class="token comment">// invoked via the macro expansion of TEST.</span>
<span class="token keyword">bool</span> <span class="token function">RegisterTest</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> base<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The <code>TCONCAT</code> macro definitions support nested use. The global variable <code>TCONCAT(_Test_ignored_, name)</code> will do register before unittest <code>main</code> function. View <code>util/testharness.cc</code>:</p>
<pre class="language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> <span class="token punctuation">{</span>
<span class="token keyword">struct</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> base<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Test<span class="token operator">></span><span class="token operator">*</span> tests<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  <span class="token comment">// namespace</span>

<span class="token keyword">bool</span> <span class="token function">RegisterTest</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> base<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tests <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tests <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Test<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Test t<span class="token punctuation">;</span>
  t<span class="token punctuation">.</span>base <span class="token operator">=</span> base<span class="token punctuation">;</span>
  t<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  t<span class="token punctuation">.</span>func <span class="token operator">=</span> func<span class="token punctuation">;</span>
  tests<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">RunAllTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> matcher <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LEVELDB_TESTS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tests <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tests<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> Test<span class="token operator">&amp;</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>tests<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string name <span class="token operator">=</span> t<span class="token punctuation">.</span>base<span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matcher<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"==== Test %s.%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>base<span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">.</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">++</span>num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"==== PASSED %d tests\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>Test</code> structure defines in anonymous namespace. Function <code>RunAllTests</code> support filter read from environment variable.</p>

      </div>
      <div id="gitalk-container">
      </div>
      <div class="footer">
        <div class="license">
          Except where otherwise noted, content on this site is licensed under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.
        </div>
        <div class="copyright">
          Copyright©2017 SF-Zhou, All Rights Reserved. Powered by <a href="https://pages.github.com/">GitHub Pages</a> and <a href="https://github.com/features/actions">GitHub Actions</a>.
        </div>
      </div>
    </div>
    <script src="/dist/gitalk.min.js"></script>
    <script src="/dist/main.js"></script>
    <script> (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-61723712-2', 'auto'); ga('send', 'pageview'); </script>
  </body>
</html>
